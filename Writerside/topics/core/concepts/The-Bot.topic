<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="The Bot ✏️" id="The-Bot">

    <show-structure depth="2" />

    <p>
        At the core of your bot is the <code>ExtensibleBot</code> class.
        This class is the most important part of Kord Extensions, as the jumping-off point for your bot.
        Among other things, it dispatches commands and event handlers, and keeps track of extensions.
        It also contains several useful APIs.
    </p>

    <chapter title="Creating a Bot" id="creating-a-bot">
        <p>
            Before you do anything else, you'll need to create a bot via the <code>ExtensibleBot</code> factory
            function.
            This function is a builder that always requires a Discord bot token parameter.
        </p>

        <code-block lang="kotlin">
            val bot = ExtensibleBot(TOKEN) {

            }
        </code-block>

        <p>
            This builder contains your bot's configuration, which is split up into a series of builder functions.
        </p>
    </chapter>

    <chapter title="Cache" id="configuration-cache">
        <p>
            The <code>cache</code> builder allows you to change
            <a href="https://dokka.kord.dev/core/dev.kord.core.cache/-kord-cache-builder/index.html">
                Kord's caching settings
            </a>.
            Kord Extensions provides some additional default settings over Kord's:
        </p>

        <list>
            <li>Configures a <code>lruCache</code> for caching up to 10,000 recent messages</li>
            <li>
                Changes the default caching strategy to <code>cacheWithCachingRestFallback</code>, which means that
                Kord will cache all entities that are retrieved via REST calls in addition to hose provided by the
                gateway.
            </li>
        </list>

        <warning>
            <p>
                It's possible that using this strategy may give you incomplete data when dealing with types of data that
                aren't fully cached automatically.
                For example, if a member is banned from a guild, and you don't yet have all the guild's bans in the
                cache,
                Kord will only keep track of bans that the bot has seen happen.
                If this is a problem for you, then you have a few options:
            </p>

            <list type="decimal">
                <li>
                    Fill the cache yourself. For example, for guild members, you could configure the
                    <code>members</code> builder to request all guild members from the gateway, and set up the required
                    intents.
                </li>

                <li>
                    Change the default strategy to <code>cacheWithRestFallback</code>, which won't cache anything
                    retrieved via REST calls.
                </li>

                <li>
                    Temporarily use another supply strategy when retrieving these types of data. For example, you could
                    use something like <code>guild.withStrategy(EntitySupplyStrategy.cachingRest).bans</code>.
                </li>

                <li>
                    Use one of the equivalent <code>fetch</code> functions to skip the cache entirely.
                </li>

            </list>

            <p>
                For most purposes, the first approach will likely be the most sensible — but the correct approach will
                heavily depend on your bot and how you need the cache to function.
            </p>
        </warning>

        <chapter title="Usage &amp; Documentation" id="cache-docs">
            <code-block lang="kotlin">
                cache {
                    cachedMessages = 10_000
                    defaultStrategy = EntitySupplyStrategy.cacheWithCachingRestFallback
                }
            </code-block>

            <chapter title="Builders" id="cache-builders">
                <table style="header-row">
                    <tr>
                        <td>Builder</td>
                        <td>Receiver</td>
                        <td>Parameters</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>kord</code></td>

                        <td>
                            <code>KordCacheBuilder</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core.cache/-kord-cache-builder/index.html">🔗</a>
                        </td>

                        <td>
                            <code>ClientResources</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core/-client-resources/index.html">🔗</a>
                        </td>

                        <td>Register a callback that will be used to directly configure Kord's cache.</td>
                    </tr>

                    <tr>
                        <td><code>transformCache</code></td>

                        <td>
                            <code>Kord</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core/-kord/index.html">🔗</a>
                        </td>

                        <td><code>DataCache</code></td>
                        <td>Register a callback that will be used to directly modify Kord's data cache settings.</td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Properties" id="cache-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Default</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>cachedMessages</code></td>
                        <td><code>Int?</code></td>
                        <td>10,000</td>
                        <td>Number of recent messages to store in Kord's cache by default. Use <code>null</code> to disable.</td>
                    </tr>

                    <tr>
                        <td><code>defaultStrategy</code></td>

                        <td>
                            <code>EntitySupplyStrategy</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core.supplier/-entity-supply-strategy/index.html">🔗</a>
                        </td>

                        <td>
                            <code>cacheWithCachingRestFallback</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core.supplier/-entity-supply-strategy/-companion/index.html">🔗</a>
                        </td>

                        <td>Kord's default caching strategy.</td>
                    </tr>
                </table>
            </chapter>
        </chapter>

    </chapter>

    <chapter title="Components" id="configuration-components">
        <p>
            The <code>components</code> builder allows you to change the component registry configuration, by swapping
            out your own implementation.
        </p>


        <chapter title="Usage &amp; Documentation" id="components-docs">
            <code-block lang="kotlin">
                components {
                    registry(::MyComponentRegistrySubclass)
                }
            </code-block>

            <chapter title="Builders" id="components-builders">
                <table style="header-row">
                    <tr>
                        <td>Builder</td>
                        <td>Receiver</td>
                        <td>Parameters</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>callbackRegistry</code></td>

                        <td> </td>
                        <td> </td>

                        <td>
                            Register a callable object (usually a constructor) that returns an alternative
                            implementation of the <code>ComponentRegistry</code> type.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Commands" id="configuration-commands">
        <p>
            The command builders allow you to configure Kord Extensions' command frameworks. Currently, Kord Extensions
            supports two primary command types:
        </p>

        <list>
            <li>
                <format style="bold">Application commands</format>, which include message, slash and user commands
            </li>
            <li>
                <format style="bold">Chat commands</format>, which are commands via messages in Discord channels
            </li>
        </list>

        <warning>
            <p>
                With the introduction of slash commands, Kord Extensions has elected to de-prioritize chat commands.
                This means that chat commands are disabled by default, and you'll need to enable them if you want to
                use them.
            </p>

            <p>
                We intend to support chat commands indefinitely.
                However, please note that most bots don't make use of them, and this means that there may be subtle
                or unknown bugs present within the chat commands framework.
                If you notice anything unusual or broken, please don't hesitate to submit a Pull Request, open an issue,
                or <a href="%kordex-discord%">contact us on Discord</a>.
            </p>
        </warning>

        <p>
            For more information on commands and how to write them, see
            <a href="Commands.topic">the dedicated documentation for them</a>.
        </p>

        <chapter title="Application Commands" id="application-commands">
            <p>
                The <code>applicationCommands</code> builder allows you to configure the Kord Extensions application
                commands framework, which includes
                <a href="Context-Commands.topic">context (user and message) commands</a> and
                <a href="Slash-Commands.topic">slash commands</a>.
            </p>

            <code-block lang="kotlin">
                applicationCommands {
                    defaultGuild(TEST_GUILD_ID)
                }
            </code-block>

            <chapter title="Builders" id="application-commands-builders">
                <table style="header-row">
                    <tr>
                        <td>Builder</td>
                        <td>Receiver</td>
                        <td>Parameters</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>applicationCommandRegistry</code></td>
                        <td> </td>
                        <td> </td>
                        <td>
                            Register a callable object (usually a constructor) that returns an alternative
                            implementation of the <code>ApplicationCommandRegistry</code> type.
                        </td>
                    </tr>

                    <tr>
                        <td><code>messageCommandCheck</code></td>
                        <td><code>MessageCommandCheck</code></td>
                        <td> </td>

                        <td>
                            Register <a href="Checks.topic">a check</a> that will apply to all registered
                            <a href="Context-Commands.topic">message commands</a>.
                        </td>
                    </tr>

                    <tr>
                        <td><code>slashCommandCheck</code></td>
                        <td><code>SlashCommandCheck</code></td>
                        <td> </td>

                        <td>
                            Register <a href="Checks.topic">a check</a> that will apply to all registered
                            <a href="Slash-Commands.topic">slash commands</a>.
                        </td>
                    </tr>

                    <tr>
                        <td><code>userCommandCheck</code></td>
                        <td><code>UserCommandCheck</code></td>
                        <td> </td>

                        <td>
                            Register <a href="Checks.topic">a check</a> that will apply to all registered
                            <a href="Context-Commands.topic">user commands</a>.
                        </td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Functions" id="application-commands-functions">
                <table style="header-row">
                    <tr>
                        <td>Function</td>
                        <td>Parameters</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>defaultGuild</code></td>

                        <td>
                            <code>Snowflake</code>
                            <a href="https://dokka.kord.dev/common/dev.kord.common.entity/-snowflake/index.html">🔗</a>
                        </td>

                        <td>
                            Specify a guild to register all global application commands to.
                            This is intended for testing,
                            and will apply to all application commands that don't have a registration guild specified.
                        </td>
                    </tr>

                    <tr>
                        <td><code>defaultGuild</code></td>
                        <td><code>String</code></td>

                        <td>
                            Specify a guild to register all global application commands to.
                            This is intended for testing,
                            and will apply to all application commands that don't have a registration guild specified.
                        </td>
                    </tr>

                    <tr>
                        <td><code>defaultGuild</code></td>
                        <td><code>ULong</code></td>

                        <td>
                            Specify a guild to register all global application commands to.
                            This is intended for testing,
                            and will apply to all application commands that don't have a registration guild specified.
                        </td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Properties" id="application-commands-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Default</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>enabled</code></td>
                        <td><code>Boolean</code></td>
                        <td><code>true</code></td>

                        <td>
                            Whether the application commands framework should be enabled.
                            If your bot does not use application commands,
                            setting this to <code>false</code> will completely disable them.
                        </td>
                    </tr>

                    <tr>
                        <td><code>register</code></td>
                        <td><code>Boolean</code></td>
                        <td><code>true</code></td>

                        <td>
                            Whether application commands should be registered with Discord automatically. Set this to
                            <code>false</code> if you only want your bot to process commands, rather than registering
                            them.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Chat Commands" id="chat-commands">
            <p>
                The <code>applicationCommands</code> builder allows you to configure the Kord Extensions chat
                commands framework, which handles the parsing and processing of
                <a href="Chat-Commands.topic">chat commands</a>.
            </p>

            <warning>
                Discord has stated that all verified Discord bots must use
                <a href="#application-commands">application commands</a> instead of chat commands wherever possible.
                However, your bot may still use chat commands for situations where application commands don't make
                sense or provide an objectively worse user experience.
            </warning>

            <code-block lang="kotlin">
                chatCommands  {
                    defaultPrefix = "!"
                    enabled = true
                    invokeOnMention = true
                }
            </code-block>

            <chapter title="Builders" id="chat-commands-builders">
                <table style="header-row">
                    <tr>
                        <td>Builder</td>
                        <td>Receiver</td>
                        <td>Parameters</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>check</code></td>
                        <td> </td>

                        <td>
                            <code>MessageCreateEvent</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core.event.message/-message-create-event/index.html">🔗</a>
                        </td>

                        <td>
                            Register <a href="Checks.topic">a check</a> that will apply to all registered
                            <a href="Chat-Commands.topic">chat commands</a>.
                        </td>
                    </tr>

                    <tr>
                        <td><code>prefix</code></td>

                        <td>
                            <code>MessageCreateEvent</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core.event.message/-message-create-event/index.html">🔗</a>
                        </td>

                        <td><code>String</code></td>

                        <td>
                            Set the prefix callback, which allows you to provide different command prefixes for
                            different contexts.
                            The <code>String</code> parameter represents the configured default prefix, which should
                            be returned by the callback if no custom prefix is required.
                        </td>
                    </tr>

                    <tr>
                        <td><code>registry</code></td>
                        <td> </td>

                        <td>
                            <code>MessageCreateEvent</code>
                            <a href="https://dokka.kord.dev/core/dev.kord.core.event.message/-message-create-event/index.html">🔗</a>
                        </td>

                        <td>
                            Register a callable object (usually a constructor) that returns an alternative
                            implementation of the <code>ChatCommandRegistry</code> type.
                        </td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Properties" id="chat-commands-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Default</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>defaultPrefix</code></td>
                        <td><code>String</code></td>
                        <td><code>"!"</code></td>

                        <td>
                            The default command prefix, required before the name of a chat command at the start of a
                            message.
                            The <code>prefix</code> builder may be used when dynamic command prefixes are required.
                        </td>
                    </tr>

                    <tr>
                        <td><code>enabled</code></td>
                        <td><code>Boolean</code></td>
                        <td><code>false</code></td>

                        <td>
                            Whether the chat commands framework should be enabled.
                            If your bot uses chat commands, setting this to <code>true</code> will enable them.
                        </td>
                    </tr>

                    <tr>
                        <td><code>invokeOnMention</code></td>
                        <td><code>Boolean</code></td>
                        <td><code>true</code></td>

                        <td>
                            Whether users should be able to run chat commands by mentioning the bot at the start of
                            their message, instead of using the configured prefix.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Extensions" id="configuration-extensions">

    </chapter>

    <chapter title="Hooks" id="configuration-hooks">

    </chapter>

    <chapter title="Internationalisation" id="configuration-internationalisation">

    </chapter>

    <chapter title="Members" id="configuration-members">

    </chapter>

    <chapter title="Plugins" id="configuration-plugins">

    </chapter>
</topic>