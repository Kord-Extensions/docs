<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Commands ✏️" id="Commands">

    <p>
        Kord Extensions provides a rich, type-safe commands framework which is only as complex as you need it to be.
        At the moment, these basic types of commands are supported:
    </p>

    <list>
        <li>
            <a href="Chat-Commands.topic"/>, prefix-based commands that are sent directly within messages on Discord.
        </li>

        <li>
            <p>
                <a href="Application-Commands.topic"/>, which are based on Discord's interactions system and show up in
                the client's UI.
            </p>

            <list>
                <li>
                    <a href="Context-Commands.topic"/>, which are special commands that appear in right-click (or
                    tap-and-hold) menus in the Discord client.
                </li>

                <li>
                    <a href="Slash-Commands.topic"/>, which are invoked by typing a slash character (<code>/</code>)
                    into the Discord chat input.
                </li>
            </list>
        </li>
    </list>

    <p>
        Each type of command has a specific set of use-cases and functionality,
        and thus provides a different API surface.
        However, all commands have quite a few things in common.
    </p>

    <p>
        The following sections describe commands in generic terms. For more information on the specific types of
        supported commands (and how to use them), please see the pages linked above.
    </p>

    <chapter title="Arguments Classes" id="arguments-classes">
        <p>
            While <a href="Context-Commands.topic"/> don't support command arguments, the other command types do. To
            specify your command's arguments, you'll need to create a class that extends the <code>Arguments</code>
            type.
        </p>

        <p>
            This class must make use of the available converter builder functions.
            Kord Extensions provides a large number of these, but it's possible to write your own or use those provided
            by third-party libraries.
        </p>

        <p>
            See below for an example Arguments subclass.
        </p>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Example Arguments subclass">
            inner class MyArguments : Arguments() {
            val target by user {
            name = "target"
            description = "Target user"
            }
            }
        </code-block>

        <p>
            Your argument class' constructor must then be provided to your command's builder function.
            The parsed arguments will be available via the <code>arguments</code> property in your command's
            <code>action</code> block.
        </p>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Example Usage">
            publicSlashCommand(arguments = ::MyArguments) {
                name = "my-command"

                action {
                    respond {
                        content = "Target user: ${arguments.user.mention}"
                    }
                }
            }
        </code-block>

        The <code>Arguments</code> type provides the following API properties:

        <table style="header-row">
            <tr>
                <td>Name</td>
                <td>Type</td>
                <td>Description</td>
            </tr>

            <tr>
                <td><code>parseForAutocomplete</code></td>
                <td><code>Boolean</code></td>

                <td>
                    <p>
                        When working with <a href="Slash-Commands.topic"/>,
                        your arguments may make use of Discord's autocomplete system.
                        If you have later arguments with an autocompletion that requires the value of a previous
                        argument, setting this to <code>true</code> will tell Kord Extensions to fill in those
                        arguments before calling your <code>autocomplete</code> block.
                    </p>

                    <p>
                        As some converter types provide a default <code>autocomplete</code> block, you may need to
                        enable this when you're using them, even when you don't provide your own.
                        For more information, see <a href="Converters.topic">the dedicated documentation</a>.
                    </p>
                </td>
            </tr>
        </table>

        <p>
            For more information on the converter system (and the available argument types),
            see <a href="Converters.topic">the dedicated documentation</a>.
        </p>
    </chapter>

    <chapter title="Modal Forms" id="modal-forms">
        <p>
            A modal form is Kord Extensions' way of representing the settings and contents of a
            <a href="https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-modal">
                Discord modal</a>.

            <a href="Chat-Commands.topic">Chat commands</a> don't support modals, but all other command types do.
        </p>

        <p>
            If you want to make use of modals, you'll need to create a class that extends the `ModalForm` type.
            This class must make use of the provided input functions to define the modal's contents.
            It may also override the properties defined by the <code>ModalForm</code> type.
        </p>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Example ModalForm subclass">
            class MyModal : ModalForm() {
                override var title: String = "My Modal"

                val line = lineText {
                    label = "Line of Text"
                    placeholder = "Enter something..."
                }
            }
        </code-block>

        <p>
            Just like with command arguments, the constructor for your <code>ModalForm</code> subtype must be passed
            to your command's builder function.
            When your command is executed, the modal is provided as an argument to your command's
            <code>action</code> function.
        </p>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Example ModalForm subclass">
            publicSlashCommand(modal = ::MyModal) {
                name = "my-command"

                action { modal ->
                    respond {
                        content = "Text: ${modal.line.value}"
                    }
                }
            }
        </code-block>

        <p>
            For more information on the Modal system (and to get a few tips on how else to use it), see
            <a href="Modals.topic">the dedicated documentation</a>.
        </p>
    </chapter>

    <chapter title="Command Objects" id="command-objects">
        <p>
            When you register a command, the builder function will return an object that extends the
            <code>Command</code> type.
            This type provides generic access to basic command data and functionality.
        </p>

        <p>
            The intended public API is described below.
            However, it's possible to extend this type (and the other command types) if you want to implement your
            own customized command types.
        </p>

        <p>
            The <code>Command</code> type extends the <code>Lockable</code> and
            <a href="Koin.topic"><code>KordExKoinComponent</code></a>
            types.

            For more information on the other APIs provided by this type, we recommend examining it in your IDE.
        </p>

        <chapter title="Functions" id="command-functions">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Arguments</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>requireBotPermissions</code></td>

                    <td>
                        <code>vararg</code><a
                            href="https://dokka.kord.dev/common/dev.kord.common.entity/-permission/index.html"
                        ><code>Permission</code></a>
                    </td>

                    <td>
                        If your bot requires any permissions to be able to execute the command, use this function to
                        register those permissions.
                        If the command is executed while the bot does not have the specified permissions, an error will
                        be sent to the user, explaining which permissions the bot is missing.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="command-properties">
            <p>
                Mutable properties may be set in the builder function used to register your command.
            </p>

            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>bundle</code></td>
                    <td><code>String?</code></td>
                    <td>
                        Translation bundle to use - default to <code>null</code>, which falls back to the extension's
                        defined bundle.
                    </td>
                </tr>

                <tr>
                    <td><code>extension</code></td>
                    <td><code>Extension</code></td>

                    <td>The extension that this command belongs to.</td>
                </tr>

                <tr>
                    <td><code>kord</code></td>

                    <td>
                        <a href="https://dokka.kord.dev/core/dev.kord.core/-kord/index.html">
                            <code>Kord</code>
                        </a>
                    </td>

                    <td>Quick access to the bot's Kord instance.</td>
                </tr>

                <tr>
                    <td><code>locking</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        Whether to use a
                        <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/">
                            Mutex
                        </a> to prevent this command from being run concurrently with itself.

                        Defaults to <code>false</code>, meaning the command may be run multiple times concurrently.
                    </td>
                </tr>

                <tr>
                    <td><code>name</code></td>
                    <td><code>String</code></td>

                    <td>
                        The command's name, which is used for invocation.
                        This property must be set for the command to be registered, and has no default value.
                    </td>
                </tr>

                <tr>
                    <td><code>sentry</code></td>
                    <td>
                        <a href="Sentry.topic">
                            <code>SentryAdapter</code>
                        </a>
                    </td>

                    <td>Quick access to the bot's Sentry adapter.</td>
                </tr>

                <tr>
                    <td><code>translationsProvider</code></td>

                    <td>
                        <a href="Internationalisation.topic">
                            <code>TranslationsProvider</code>
                        </a>
                    </td>

                    <td>Quick access to the bot's translations provider.</td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Context Objects" id="context-objects">
        <p>
            When a command is executed, the provided <code>action</code> block is run.
            This block is a receiver function against a subtype of the <code>CommandContext</code> type, which provides
            an API that allows you to work with the command's execution data and respond to the user.
        </p>

        <p>
            The <code>CommandContext</code> type extends the

            <a href="Internationalisation.topic">
                <code>TranslatableContext</code>
            </a>

            and

            <a href="Koin.topic">
                <code>KordExKoinComponent</code>
            </a>

            types.
        </p>

        <chapter title="Functions" id="context-functions">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>getChannel</code></td>

                    <td>
                        Returns the relevant
                        <a href="https://dokka.kord.dev/core/dev.kord.core.behavior.channel/-channel-behavior/index.html">
                            <code>ChannelBehavior</code>
                        </a>
                        for this command execution.
                    </td>
                </tr>

                <tr>
                    <td><code>getGuild</code></td>

                    <td>
                        Returns the relevant
                        <a href="https://dokka.kord.dev/core/dev.kord.core.behavior/-guild-behavior/index.html">
                            <code>GuildBehavior</code>
                        </a>
                        for this command execution, or <code>null</code> if this command was executed in a DM.
                    </td>
                </tr>

                <tr>
                    <td><code>getLocale</code></td>

                    <td>
                        Resolves and returns the relevant <code>Locale</code> object for this command execution,
                        using the bot's

                        <a href="Config-Internationalization.topic" anchor="builders">
                            configured locale resolvers</a>.
                    </td>
                </tr>

                <tr>
                    <td><code>getMember</code></td>

                    <td>
                        Returns the relevant
                        <a href="https://dokka.kord.dev/core/dev.kord.core.behavior/-member-behavior/index.html">
                            <code>MemberBehavior</code>
                        </a>
                        for this command execution, or <code>null</code> if this command was executed in a DM.
                    </td>
                </tr>

                <tr>
                    <td><code>getUser</code></td>

                    <td>
                        Returns the relevant
                        <a href="https://dokka.kord.dev/core/dev.kord.core.behavior/-member-behavior/index.html">
                            <code>UserBehavior</code>
                        </a>
                        for this command execution, or <code>null</code> if this command was executed by a webhook.
                    </td>
                </tr>

                <tr>
                    <td><code>translate</code></td>

                    <td>
                        There are a number of overloads for this function, which allows you to translate a given
                        string key based on the resolved locale or another given locale.
                        For more information on translations, see
                        <a href="Internationalisation.topic">the dedicated documentation</a>,
                        and examine the functions in your IDE for more information on their parameters.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="context-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>bundle</code></td>
                    <td><code>String?</code></td>

                    <td>The command's translation bundle, falling back to the extension's if not defined.</td>
                </tr>

                <tr>
                    <td><code>cache</code></td>
                    <td><code>MutableStringKeyedMap&lt;Any&gt;</code></td>

                    <td>
                        The cache object used for this execution, which may contain data set by the current command's
                        defined <a href="Checks.topic"/>.
                    </td>
                </tr>

                <tr>
                    <td><code>command</code></td>
                    <td><code>Command</code></td>

                    <td>
                        Quick access to the object representing the current command.
                        No generic is used for this property, but subtypes will provide a separate property with a
                        more concrete type.
                    </td>
                </tr>

                <tr>
                    <td><code>commandName</code></td>
                    <td><code>String</code></td>

                    <td>
                        The command's name.
                        For chat commands, this will be the name used to execute the command, which may be an alias.
                    </td>
                </tr>

                <tr>
                    <td><code>eventObj</code></td>

                    <td>
                        <a href="Events.topic">
                            <code>Event</code>
                        </a>
                    </td>

                    <td>
                        The event object that caused this command execution.
                        No generic is used for this property, but subtypes will provide a separate property with a
                        more concrete type, generally named <code>event</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>sentry</code></td>

                    <td>
                        <a href="Sentry.topic">
                            <code>SentryContext</code>
                        </a>
                    </td>

                    <td>Quick access to the bot's Sentry context.</td>
                </tr>

                <tr>
                    <td><code>translationsProvider</code></td>

                    <td>
                        <a href="Internationalisation.topic">
                            <code>TranslationsProvider</code>
                        </a>
                    </td>

                    <td>Quick access to the bot's translations provider.</td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>