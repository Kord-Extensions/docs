<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="The Bot" id="The-Bot">

    <p>
        At the core of your bot is the <code>ExtensibleBot</code> class.
        This class is the most important part of Kord Extensions, as the jumping-off point for your bot.
        Among other things, it dispatches commands and event handlers, and keeps track of extensions.
        It also contains several useful APIs.
    </p>

    <chapter title="Creating a Bot" id="creating-a-bot">
        <p>
            Before you do anything else, you'll need to create a bot via the <code>ExtensibleBot</code> factory
            function.
            This function is a builder that always requires a Discord bot token parameter. The builder can then be
            used to configure the bot.
        </p>

        <code-block lang="kotlin">
            val bot = ExtensibleBot(TOKEN) {
                applicationCommands {
                    defaultGuild(envOrNull("TESTING_GUILD"))
                }

                extensions {
                    add(::MyExtension)

                    help {
                        color { getRandomColor() }
                    }
                }

                hooks {
                    beforeKoinSetup {
                        loadModule {
                            single { Database() } bind Database::class
                        }
                    }
                }

                @OptIn(PrivilegedIntent::class)
                intents {
                    +Intent.GuildMembers
                    +Intent.MessageContent
                }
            }
        </code-block>
    </chapter>

    <chapter title="Configuration" id="configuration">
        <p>
            The <code>ExtensibleBot</code> builder contains your bot's configuration, which is split up into a series
            of builder functions.
            For more information on what options are available and how to use them, see
            <a href="Configuration.topic">the Configuration section</a>.
        </p>
    </chapter>

    <chapter title="ExtensibleBot API" id="api">
        <p>
            The <code>ExtensibleBot</code> type exposes a number of APIs that may be helpful for advanced use-cases.
            If you'd like to use them, you can get access to the current object via <a href="Koin.topic" />.
        </p>

        <chapter title="Functions" id="functions">
            <table style="header-row">
                <tr>
                    <td>Function</td>
                    <td>Parameters</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>close</code></td>
                    <td> </td>
                    <td>
                        Stop the bot by shutting down the Kord instance and stopping the Kord Extensions
                        <a href="Koin.topic">Koin context</a>.
                        A bot that has been closed can no longer be used, and a new bot must be constructed.
                        This function exists to close and clean up the bot, so a new one may be constructed.
                    </td>
                </tr>

                <tr>
                    <td><code>on</code></td>

                    <td>
                        <code>Boolean</code>,
                        <code>CoroutineScope</code>,
                        <code>suspend T.() -> Unit</code>
                    </td>

                    <td>
                        Manually subscribe to an event.
                        Most developers will never need to use this directly.
                        If you can register an event handler in <a href="Extensions.topic">an Extension</a>,
                        then that's a far better option.
                    </td>
                </tr>

                <tr>
                    <td><code>send</code></td>

                    <td>
                        <a href="https://dokka.kord.dev/core/dev.kord.core.event/-event/index.html">
                            <code>Event</code>
                        </a>
                    </td>

                    <td>
                        Send an event to the handlers listening for it.
                        You can use this to send a custom event to be acted upon elsewhere.
                        If possible, use the <a href="Events.topic"><code>KordExEvent</code></a> base type instead of
                        Kord's
                        <a href="https://dokka.kord.dev/core/dev.kord.core.event/-event/index.html">
                            <code>Event</code>
                        </a>, as it handles filling out the parameters for you.
                    </td>
                </tr>

                <tr>
                    <td><code>start</code></td>
                    <td> </td>
                    <td>
                        Start up the bot and log into Discord.
                        Blocks the current coroutine until the bot is shut down.
                    </td>
                </tr>

                <tr>
                    <td><code>startAsync</code></td>
                    <td> </td>

                    <td>
                        Start up the bot and log into Discord.
                        Launches the <code>start</code> function via Kord's coroutine scope, instead of blocking.
                        Can be used to start the bot from synchronous code.
                    </td>
                </tr>

                <tr>
                    <td><code>stop</code></td>
                    <td> </td>

                    <td>
                        Stop the bot by telling the Kord instances to log out of Discord.
                        This will leave the <a href="Koin.topic">Koin context</a> intact, so the bot may be restarted
                        later.
                    </td>
                </tr>
            </table>

            <p>
                The following functions are all related to extension management.
            </p>

            <table style="header-row">
                <tr>
                    <td>Function</td>
                    <td>Parameters</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>addExtension</code></td>
                    <td><code>() -> Extension</code></td>

                    <td>
                        Manually install an extension by constructing and loading it.
                        This is only exposed for advanced use-cases, and you should prefer
                        <a href="Config-Extensions.topic" anchor="builders">
                            loading extensions via the bot's configuration
                        </a>
                        instead where possible.
                    </td>
                </tr>

                <tr>
                    <td><code>findExtension</code></td>
                    <td><code>reified T</code></td>

                    <td>
                        Find the first loaded extension that is an instance of (or extend) <code>T</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>findExtensions</code></td>
                    <td><code>reified T</code></td>

                    <td>
                        Find all loaded extensions that are instances of (or extend) <code>T</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>loadExtension</code></td>
                    <td><code>String</code></td>

                    <td>
                        Reload a previously loaded extension by name.
                        If the extension isn't found or is already loaded, nothing happens.
                    </td>
                </tr>

                <tr>
                    <td><code>removeExtension</code></td>
                    <td><code>String</code></td>

                    <td>
                        Unload and remove a registered extension by name.
                        This will prevent the extension from being loaded in the future.
                        If the extension isn't found or loaded, nothing happens.
                    </td>
                </tr>

                <tr>
                    <td><code>unloadExtension</code></td>
                    <td><code>String</code></td>
                    <td>
                        Unloaded a currently installed extension by name.
                        If the extension isn't found or loaded, nothing happens.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="properties">
            <table style="header-row">
                <tr>
                    <td>Property</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>settings</code></td>
                    <td><code>ExtensibleBotBuilder</code></td>

                    <td>
                        The builder used when <a href="Configuration.topic">configuring the bot</a>.
                        Provided as a way to access the user-supplied configuration, excluding the bot token.
                    </td>
                </tr>

                <tr>
                    <td><code>events</code></td>
                    <td><code>SharedFlow&lt;Any&gt;</code></td>

                    <td>
                        Shared flow which combined the events sent by both Kord and Kord Extensions.
                    </td>
                </tr>

                <tr>
                    <td><code>eventPublisher</code></td>
                    <td><code>MutableSharedFlow&lt;Any&gt;</code></td>

                    <td>
                        Mutable shared flow used for event publishing.
                        For most use-cases, you should use the <code>send</code> function instead of accessing this
                        directly.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>
