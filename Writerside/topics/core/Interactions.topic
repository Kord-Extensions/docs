<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Interactions" id="Interactions">

    <p>
        To give users richer ways to interact with your bot (when compared to sending messages), Discord provides a
        system known as
        <a href="https://discord.com/developers/docs/interactions/receiving-and-responding">Interactions</a>.
        This system is designed to allow for public and private responses to rich Interaction types.
    </p>

    <p>
        Interactions are an important concept to understand, as they will make up the bulk of user-triggered actions
        that your bot needs to deal with.
    </p>

    <chapter title="Interactions 101" id="interactions-101">
        <p>
            Your bot receives an
            <a href="https://discord.com/developers/docs/interactions/receiving-and-responding">Interaction</a> in
            response to one of the following actions taken on Discord:
        </p>

        <list id="interaction-list">
            <li>
                A user executes an <a href="Application-Commands.topic">application command</a> belonging to your bot.
            </li>

            <li>
                A user enters data into a slash <a href="Converters.topic">command argument</a> that supports
                auto-completion.
            </li>

            <li>
                A user makes use of a <a href="Components.topic">message component</a>, such as an interactive button
                or select menu.
            </li>

            <li>
                A user submits a <a href="Modals.topic">modal form</a>.
            </li>
        </list>

        <p>
            When an Interaction is received from Discord, Kord will fire an event that extends
            <a href="https://dokka.kord.dev/core/dev.kord.core.event.interaction/-interaction-create-event/index.html">
                <code>InteractionCreateEvent</code>
            </a>.
            These events provide an
            <a href="https://dokka.kord.dev/core/dev.kord.core.entity.interaction/-interaction/index.html">
                <code>interaction</code>
            </a> property, allowing you to respond directly to the Interaction.
        </p>

        <tip>
            While it will sometimes be necessary to respond to these events directly, most bots will only need to use
            Kord Extensions' built-in abstractions.
            For more information on those abstractions, see <a anchor="interaction-list">the list above</a>.
        </tip>

        <p>
            When responding to an Interaction, your response may be one of the following main types:
        </p>

        <list>
            <li>Ephemeral, meaning only the user that triggered the Interaction is able to see the response.</li>

            <li>
                Public, meaning everyone with access to the current channel is able to see the response and the user
                that triggered the Interaction.
            </li>
        </list>
    </chapter>

    <chapter title="Unexpected Interaction Behaviors" id="unexpected-behaviors">
        <p>
            Internally, Discord's Interaction system is a bit of a mess.
            While it is technically possible to work with the Interaction API directly via some of the objects
            exposed by Kord Extensions (especially via <a href="Unsafe.topic">the Unsafe Module</a>), the built-in
            abstractions are provided to lower the risk of unexpected behavior.
        </p>

        <p>
            Known instances of unexpected behavior include:
        </p>

        <list>
            <li>
                Responding to an Interaction using the wrong response type, after an initial response has been made.
                Even though the API technically allows you to respond using mixed response types, Discord will
                often ignore the type you provided if you aren't consistent.
            </li>

            <li>
                Responding to an ephemeral Interaction after editing the initial response, which may result in a public
                response in some situations.
            </li>
        </list>

        <p>
            Additionally, as the Interaction system is internally implemented using Discord's webhook system, changes
            that Discord makes to how webhook messages work may also affect your Interactions.
        </p>

        <p>
            For example, a 2023 change to webhook permissions was made because slash command responses were able to
            mention <code>@everyone</code> when they otherwise shouldn't be able to.
            In this instance, Discord normalized webhook permissions to match those of the user who created the webhook.
            This fixed the problem with slash commands but limited the emoji that may be sent using a webhook to those
            from guilds the webhook creator is present on.
        </p>
    </chapter>

    <chapter title="Interaction Context Types" id="interaction-contexts">
        <p>
            Discord supports two main types of Interaction response â€” ephemeral and public.
            Ephemeral responses are only visible to the user that triggered the Interaction, whereas public responses
            are visible to everyone that has access to the current channel.
        </p>

        <p>
            Because Discord's Interactions can behave strangely if they aren't used how Discord expects them to be,
            Kord Extensions provides specific context types that help you to avoid unexpected behaviors.
            These types expect you to work with one of the main Interaction types, warning you when you attempt to do
            something that might not do what you expect.
        </p>

        <p>
            These context types inherit the <code>InteractionContext</code> type, and are split by Interaction response
            types:
        </p>

        <list>
            <li><code>EphemeralInteractionContext</code> for ephemeral Interaction responses.</li>
            <li><code>PublicInteractionContext</code> for public Interaction responses.</li>
        </list>

        <p>
            These types provide an identical API surface, allowing you to respond to Interactions easily without
            accidentally specifying the wrong type of response.
            The <code>InteractionContext</code> type takes several generic type parameters, with the following used
            in the tables below:
        </p>

        <list>
            <li>
                <code>ResponseBehavior</code> - A subtype of Kord's
                <a href="https://dokka.kord.dev/core/dev.kord.core.behavior.interaction.response/-interaction-response-behavior/index.html">
                    <code>InteractionResponseBehavior</code>
                </a> type, corresponding with the current Interaction response type.
            </li>
        </list>

        <chapter title="Builders" id="interaction-context-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>edit</code></td>
                    <td><code>InteractionResponseModifyBuilder</code></td>

                    <td>
                        Edit the first Interaction response, regardless of whether (or how many times) this
                        Interaction has been responded to.
                        May be called before a response has been sent, as the first Interaction response is always
                        a "bot is thinking" message until this function
                        (or one of the response functions) is called.
                    </td>
                </tr>

                <tr>
                    <td><code>respond</code></td>
                    <td><code>FollowupMessageCreateBuilder</code></td>

                    <td>
                        Respond to the Interaction with a follow-up matching the current Interaction response type.
                    </td>
                </tr>

                <tr>
                    <td><code>respondOpposite</code></td>
                    <td><code>FollowupMessageCreateBuilder</code></td>

                    <td>
                        Respond to the Interaction with a follow-up
                        <format style="bold">with the opposite type to the current Interaction response type</format>.
                        While Discord's API allows you to do this,
                        <format style="bold">it will rarely do what you expect</format>.
                        This function is provided only for advanced use-cases that need it.
                    </td>
                </tr>

                <tr id="interaction-context-builders-paginators:header:text:center">
                    <td colspan="3">
                        Paginator Builders
                    </td>
                </tr>

                <tr>
                    <td><code>editingPaginator</code></td>
                    <td><code>PaginatorBuilder</code></td>

                    <td>
                        <p>
                            Convenience function, allowing you to easily create a button-based
                            <a href="Paginators.topic">paginator</a>
                            by editing the first response to this Interaction.
                            The following parameters are supported:
                        </p>

                        <list>
                            <li>
                                <code>defaultGroup = ""</code> - The default paginator group.
                            </li>

                            <li>
                                <code>locale = null</code> - The locale to use for this paginator's buttons.
                                In a command or component context, you'll want to provide the result of
                                <code>getLocale()</code> here.
                            </li>
                        </list>

                        <p>
                            <format style="bold">Note:</format>
                            This will not send the paginator automatically.
                            You'll need to call the <code>send</code> function on this function's return value to
                            send it.
                        </p>

                        <p>
                            For more information on paginators (and the paginator builder), see
                            <a href="Paginators.topic">the dedicated documentation</a>.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>respondingPaginator</code></td>
                    <td><code>PaginatorBuilder</code></td>

                    <td>
                        <warning>
                            <p>
                                If you're working within an ephemeral Interaction context, then it's important to note
                                that
                                <format style="bold">this function will always result in a public response</format>.
                                This is due to a Discord API limitation, wherein Discord has made it impossible to edit
                                ephemeral Interaction follow-ups.
                            </p>

                            <p>
                                If you want to use a paginator in your ephemeral Interaction responses, you will need
                                to use <code>editingPaginator</code> instead.
                            </p>
                        </warning>

                        <p>
                            Convenience function, allowing you to easily create a button-based
                            <a href="Paginators.topic">paginator</a> in an Interaction follow-up message.
                            The following parameters are supported:
                        </p>

                        <list>
                            <li>
                                <code>defaultGroup = ""</code> - The default paginator group.
                            </li>

                            <li>
                                <code>locale = null</code> - The locale to use for this paginator's buttons.
                                In a command or component context, you'll want to provide the result of
                                <code>getLocale()</code> here.
                            </li>
                        </list>

                        <p>
                            <format style="bold">Note:</format>
                            This will not send the paginator automatically.
                            You'll need to call the <code>send</code> function on this function's return value to
                            send it.
                        </p>

                        <p>
                            For more information on paginators (and the paginator builder), see
                            <a href="Paginators.topic">the dedicated documentation</a>.
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="interaction-context-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>interactionResponse</code></td>
                    <td><code>ResponseBehavior</code></td>

                    <td>
                        The current Interaction response object that this context is working with.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>