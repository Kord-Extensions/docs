<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Beginner Tutorial" id="Beginner-Tutorial"
        switcher-label="Editor">

    <p>
        This tutorial is for absolute beginners — people who are still learning about Kotlin and its build tools. If
        you're already familiar with the basics, you should skip this and look at
        <a href="https://github.com/kord-extensions/template">the template project</a> instead.
    </p>

    <chapter title="Requirements" id="requirements">
        <p>
            Before getting started, you'll need to install and set up some pieces of software.
        </p>

        <note>
            This tutorial assumes you'll be using a standard Kotlin setup, and recommends the use
            of IntelliJ IDEA by JetBrains — but you can use another IDE that you're more familiar
            with, as long as it supports Kotlin.
        </note>

        <list type="bullet">
            <li>
                <format style="bold">Java Development Kit (JDK):</format>
                At least version %java-version%, but at most version 20 — we recommend
                <a href="https://adoptium.net">Adoptium</a>
            </li>

            <li>
                <format style="bold">IDE:</format> We recommend
                IntelliJ IDEA Community (via
                <a href="https://www.jetbrains.com/toolbox-app/">JetBrains Toolbox</a>), which
                is a free IDE created by the same people that maintain Kotlin — but
                <a href="https://kotlinlang.org/docs/kotlin-ide.html">this page</a> provides more information on which
                editors you can use for Kotlin development
            </li>
        </list>
    </chapter>

    <chapter title="Creating the Project" id="creating-the-project">
        <p>
            Once you've set up the above requirements, it's time to create your project.
        </p>

        <tip>
            For more relevant information, select your editor using the menu at the top of the page.
        </tip>

        <chapter switcher-key="IntelliJ IDEA" title="Using IntelliJ IDEA" id="using-intellij-idea">
            <p>
                Once you've installed IntelliJ IDEA, you're ready to create a project. If you already have a project
                open, please close it before following these steps:
            </p>

            <list type="decimal">
                <li>
                    Select <format style="bold">Projects</format> on the left, and click on the
                    <format style="bold">New Project</format> button at the top
                </li>
                <li>
                    <p>
                        Select <format style="bold">New Project</format> on the left, and set the following options:
                    </p>

                    <list>
                        <li><format style="bold">Name:</format> <code>example-bot</code></li>
                        <li><format style="bold">Location:</format> A folder you'd like to use for your projects</li>
                        <li><format style="bold">Language:</format> Kotlin</li>
                        <li><format style="bold">Build System:</format> Gradle</li>
                        <li><format style="bold">JDK:</format> %java-version%</li>
                        <li><format style="bold">Gradle DSL:</format> Kotlin</li>
                    </list>

                    <p>
                        Under <format style="bold">Advanced Settings</format>, set the following options:
                    </p>

                    <list>
                        <li><format style="bold">Gradle version:</format> ✅ Auto-select</li>
                        <li><format style="bold">GroupId:</format> <code>com.example.bot</code></li>
                        <li><format style="bold">ArtifactId:</format> <code>example-bot</code></li>
                    </list>
                </li>

                <li>
                    Click the <format style="bold">Create</format> button
                </li>

                <li>
                    If you're on Windows, allow IDEA to configure Windows Firewall when prompted
                </li>
            </list>

            <tip>
                To ensure that the IDE remains fast and responsible, we recommend that you wait for IDEA to
                finish indexing before continuing.
                If you're on a slow computer, this may take a while — IDEA will show its progress at the bottom of the
                window while it continues to index your project.
            </tip>

            <p>
                Your project has now been created, and you can move on to the next section.
            </p>
        </chapter>

        <chapter switcher-key="Others" title="Using another editor" id="using-another-editor">
            <p>
                If you're not using IntelliJ IDEA, then you may need to
                <a href="https://gradle.org/install/">manually install Gradle</a> to generate
                a new Gradle project. If this is the case, once you have Gradle installed, you can follow
                these steps to create your project:
            </p>

            <list type="decimal">
                <li>
                    Open a terminal (or Command Prompt on Windows) in an empty folder that you've created
                    for your project
                </li>

                <li>
                    <p>
                        Type <code>gradle init</code> and hit enter, and answer the questions as follows:
                    </p>

                    <list>
                        <li><format style="bold">Type:</format> Application</li>
                        <li><format style="bold">Implementation language:</format> Kotlin</li>
                        <li><format style="bold">Split functionality:</format> No</li>
                        <li><format style="bold">Build script DSL:</format> Kotlin</li>
                        <li><format style="bold">Project name:</format> <code>bot</code></li>
                        <li><format style="bold">Package:</format> <code>com.example.bot</code></li>
                    </list>
                </li>

                <li>
                    Type <code>gradlew wrapper --gradle-version VERSION</code>, replacing
                    <code>VERSION</code> with the latest version available from the
                    <a href="https://gradle.org/releases/">Gradle releases page</a>, and hit
                    enter
                </li>
            </list>

            <p>
                Your project has now been created, and you can move on to the next section.
            </p>
        </chapter>
    </chapter>

    <chapter title="Configuring Gradle" id="configuring-gradle">
        <p>
            Once you've created your project, you'll need to configure Gradle and set up your project's dependencies.
            This is done by creating and editing some of your project's files.
        </p>

        <list type="decimal">
            <li>
                <p>
                    First, set up your dependencies. Within the <path>gradle/</path> folder, create a file named
                    <path>libs.versions.toml</path> with the following contents, replacing <code>KOTLIN_VERSION</code>
                    with

                    <a href="https://github.com/Kord-Extensions/kord-extensions/blob/root/gradle/libs.versions.toml#:~:text=kotlin">
                        the same version used by Kord Extensions
                    </a>:
                </p>

                <code-block lang="ini">
                    [versions]
                    kotlin = "KOTLIN_VERSION"  # Kotlin version must be updated in build.gradle.kts too

                    kord-extensions = "%version%"
                    slf4j = "2.0.9"

                    [libraries]
                    kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8" }

                    slf4j = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
                </code-block>
            </li>

            <li>
                <p>
                    Next, configure your build script by editing your <path>build.gradle.kts</path> file.
                    You'll need to replace its contents with the following, replacing <code>KOTLIN_VERSION</code>
                    with

                    <a href="https://github.com/Kord-Extensions/kord-extensions/blob/root/gradle/libs.versions.toml#:~:text=kotlin">
                        the same version used by Kord Extensions
                    </a>:
                </p>

                <code-block lang="kotlin">
                    plugins {
                        // Update this if you change the Kotlin version in libs.versions.toml
                        kotlin("jvm") version "KOTLIN_VERSION"

                        // The KordEx plugin
                        id("dev.kordex.gradle.kordex") version "%plugin-version%"
                    }

                    dependencies {
                        implementation(libs.kotlin.stdlib)
                        implementation(libs.slf4j)
                    }

                    kordEx {
                        mainClass = "com.example.bot.AppKt"
                    }
                </code-block>
            </li>

            <li switcher-key="IntelliJ IDEA">
                In IntelliJ IDEA, click on the <format style="bold">Gradle</format> tab on the right side of the
                window, and then click the <format style="bold">Reload All Gradle Projects</format> button — this
                will tell IDEA to refresh the project and index its dependencies
            </li>

            <li switcher-key="Others">
                If your editor supports Gradle, you may need to tell it to reload your Gradle project.
                If this is the case, then please see your editor's documentation for more information.
            </li>
        </list>
    </chapter>

    <chapter title="Cleanup and Testing" id="cleanup-and-testing">
        <p>
            If a folder named <path>src/test</path> was created, delete it for now. If you'd like to write unit tests
            later, you can always recreate it.
        </p>

        <p>
            Before continuing, create a file containing a <code>main</code> function:
        </p>

        <list switcher-key="IntelliJ IDEA">
            <li>
                Right-click the <path>src/main/kotlin</path> folder in the left sidebar, select
                <format style="bold">New -> Package</format>, and enter <code>com.example.bot</code>
            </li>

            <li>
                Right-click the <path>bot</path> folder you just created, select
                <format style="bold">New -> Kotlin Class/File</format>,
                select <format style="bold">File</format> from the list, and enter <code>App</code>
            </li>

            <li>
                <p>
                    Add the following code to the file you just created:
                </p>

                <code-block lang="kotlin">
                    suspend fun main() {
                        // We'll add code here later
                    }
                </code-block>
            </li>
        </list>

        <list switcher-key="Others">
            <li>
                Within the <path>src/main/kotlin</path> folder, create folders matching this structure:
                <path>com/example/bot</path>
            </li>

            <li>
                Within the <path>bot</path> folder you just created, create a new file named <code>App.kt</code>
                (the path should be <path>src/main/kotlin/com/example/bot</path>)
            </li>

            <li>
                <p>
                    Add the following code to the file you just created:
                </p>

                <code-block lang="kotlin">
                    package com.example.bot

                    suspend fun main() {
                        // We'll add code here later
                    }
                </code-block>
            </li>
        </list>

        <p switcher-key="IntelliJ IDEA">
            Let's make sure your project compiles.
            In the <format style="bold">Gradle</format> tab on the right side of the window,
            expand <path>example-bot</path> -> <path>Tasks</path> -> <path>build</path>, and double-click on the
            <code>build</code> task.
            Once Gradle has finished building your project, you should see <code>BUILD SUCCESS</code> in the new
            pane at the bottom of the window.
        </p>

        <tip switcher-key="Other">
            If your editor supports Gradle, you may be able to run the <code>build</code> task from directly within it.
            If this is the case, then please see your editor's documentation for more information.
        </tip>

        <p switcher-key="Other">
            Let's make sure your project compiles.
            Open a terminal (or Command Prompt on Windows) within your project's folder, and run the following:
        </p>

        <list switcher-key="Other">
            <li><format style="bold">Mac/Linux:</format> <code>./gradlew build</code></li>
            <li><format style="bold">Windows:</format> <code>./gradlew.bat build</code></li>
        </list>

        <p switcher-key="Other">
            Once Gradle has finished building your project, you should see <code>BUILD SUCCESS</code> in the output.
        </p>

        <p>
            If this is not the case, please review the steps above.
            You may also ask for help on <a href="%kordex-discord%">our Discord server</a>.
        </p>
    </chapter>

    <chapter title="A Simple Bot" id="a-simple-bot">
        <p>
            Now that your project has been set up, let's get down to business and create your first bot.
        </p>

        <p>
            Within the <path>App.kt</path> file you created earlier, add the following code before your
            <code>main</code> function:
        </p>

        <code-block lang="kotlin">
            import dev.kordex.core.ExtensibleBot
            import dev.kordex.core.utils.env

            private val TOKEN = env("TOKEN")  // Get the bot's token from environment variables or a .env file
        </code-block>

        <p>
            Within the <code>main function</code>, replace the comment with the following code:
        </p>

        <code-block lang="kotlin">
            val bot = ExtensibleBot(TOKEN) {
                // We'll add code here later
            }

            bot.start()
        </code-block>

        <p>
            Your file should now look like this:
        </p>

        <code-block collapsible="true" lang="kotlin">
            package com.example.bot

            import dev.kordex.core.ExtensibleBot
            import dev.kordex.core.utils.env

            private val TOKEN = env("TOKEN")  // Get the bot's token from environment variables or a .env file

            suspend fun main {
                val bot = ExtensibleBot(TOKEN) {
                    // We'll add code here later
                }

                bot.start()
            }
        </code-block>

        <p>
            Next, create a new file named <path>.env</path> in the same folder as your <path>build.gradle.kts</path>
            file. Add the following to that file, replacing <code>DISCORD_TOKEN</code> with the token for a Discord bot
            you created via the <a href="https://discord.com/developers">Discord Developer Portal</a>.
        </p>

        <warning>
            If you're using Git or another version-control system, remember not to push the <path>.env</path> file to
            an online repository.
            To avoid this, you may wish to set up a <a href="https://git-scm.com/docs/gitignore">gitignore</a>, or use
            whatever similar system your version-control system provides.
        </warning>

        <code-block lang="plain text">
            TOKEN=DISCORD_TOKEN
        </code-block>

        <p>
            At this point, you should have the simplest possible bot. You can start it by running the <code>run</code>
            Gradle task, but it won't do very much yet.
            In the next section, let's add some functionality to your bot.
        </p>
    </chapter>

    <chapter title="Adding Some Functionality" id="adding-some-functionality">
        <p>
            Using "Extensions," let's create a basic command.
            This command is an updated version of the classic <code>!slap</code> command that was a common feature
            present in IRC bots a long time ago.
        </p>

        <p>
            First, create a folder named <path>extensions</path> within your <path>bot folder</path>, and then create
            a new file within it named <path>SlapExtension.kt</path>, containing the following code:
        </p>

        <code-block lang="kotlin">
            // import ...

            class SlapExtension : Extension() {
                override val name = "slap"

                override suspend fun setup() {
                    // We'll add code here later
                }
            }
        </code-block>

        <p>
            The above code creates a new extension named "slap," but it doesn't currently do anything.
            Let's start by adding a basic command, by replacing the comment in the <code>setup</code> function:
        </p>

        <code-block lang="kotlin">
            publicSlashCommand {
                name = "slap"
                description = "Get slapped!"

                action {
                    respond {
                        content = "_Slaps ${user.mention} around a bit with a smelly trout!_"
                    }
                }
            }
        </code-block>

        <p>
            Let's also make the bot load this extension. Head back to <path>App.kt</path>, and replace the comment
            in the <code>main</code> function with the following:
        </p>

        <code-block lang="kotlin">
            extensions {
                add(::SlapExtension)
            }
        </code-block>

        <p>
            If you were to run the bot now, a new command should be available on all servers you've added it to.
            It should be named <code>/slap</code> — go ahead and give it a try!
        </p>

        <warning>
            It can take Discord up to an hour to notice that you've registered a command.
            If your bot is running without any errors, and you're testing it within a server you've added it to, you
            may need to wait some time before the command will show up.
        </warning>
    </chapter>

    <chapter title="Adding An Argument" id="adding-an-argument">
        <p>
            Our slap command is now functional, but it's not very fun.
            Let's add an argument, so we can slap other users!
        </p>

        <p>
            After the <code>setup</code> function in <path>SlapExtension.kt</path>, add the following inner class:
        </p>

        <code-block lang="kotlin">
            inner class SlapArgs : Arguments() {
                val target by user {
                    name = "user"
                    description = "User to slap"
                }
            }
        </code-block>

        <p>
            Next, modify the command you registered earlier:
        </p>

        <code-block lang="kotlin">
            publicSlashCommand(::SlapArgs) {
                name = "slap"
                description = "Get slapped!"

                action {
                    respond {
                        content = "_Slaps ${arguments.target.mention} around a bit with a smelly trout!_"
                    }
                }
            }
        </code-block>

        <p>
            If you restart the bot, you should now be able to slap other users. Give it a try!
        </p>
    </chapter>

    <chapter title="Next Steps" id="next-steps">
        <p>
            As you may have realized, the above tutorial only showcases a tiny fraction of what you can do with
            Kord Extensions.
            We recommend you experiment with the code you've written above for a while, and then read the rest of this
            documentation.
        </p>

        <p>
            If you run into any problems, feel free to
            <a href="%kordex-discord%">join our Discord server</a> for support!
        </p>
    </chapter>

    <seealso style="cards">
        <category ref="relevant-links">
            <a href="https://github.com/kord-extensions/template"
               summary="Get started quickly by using our template to create your bot."
            >Template Project</a>
        </category>
    </seealso>
</topic>
