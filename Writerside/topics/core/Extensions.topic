<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Extensions" id="Extensions">

    <show-structure depth="2" />

    <p>
        Once you've <a href="The-Bot.topic">created your bot</a> and
        <a href="Configuration.topic">configured it to your needs</a>, you can start adding functionality.
        Kord Extensions requires functionality to be separated out into
        <format style="bold">Extensions</format>, allowing commands and event handlers to be grouped by function and
        easily loaded and unloaded.
    </p>

    <p>
        Extensions are the building blocks that make up your bot's features, and represent single units of
        functionality.
        For example:
    </p>

    <list>
        <li>
            A <a href="Config-Extensions.topic" anchor="help">help extension</a> that implements
            <code>HelpProvider</code> and contains all help-related commands and event handlers.
        </li>

        <li>
            A <a href="PluralKit.topic">PluralKit extension</a> that provides an API for working with PluralKit,
            including code that fires custom events, and any relevant commands and event handlers.
        </li>

        <li>
            An <a href="Phishing.topic">anti-phishing extension</a> that downloads and maintains a database of known
            phishing domains,
            and contains the relevant commands and event handlers needed to automatically moderate messages containing
            them.
        </li>
    </list>

    <chapter title="Conventions" id="conventions" collapsible="true">
        <p>
            While you can organize your extensions in any way you wish, the following is worth keeping in mind:
        </p>

        <list>
            <li>
                <p>
                    Consider placing your extensions within a package named <path>extensions</path>.
                </p>

                <list>
                    <li>
                        If the extension only requires one file or class, name it
                        <code>$lt;Name$gt;Extension</code> and place it directly within the <path>extensions</path>
                        package.
                    </li>

                    <li>
                        If the extension requires multiple files or classes, create a subpackage for it within the
                        <path>extensions</path> package, named after the extension and containing it and everything
                        it needs.
                    </li>
                </list>
            </li>

            <li>
                Extension classes should have descriptive names and end with the word "Extension."
                For example, use <code>MinecraftExtension</code> instead of <code>MEx</code> or
                <code>Minecraft</code>.
            </li>

            <li>
                <p>
                    Extension names should be easy to guess, and written in <code>lowered-kebab-case</code>.
                    For example, use <code>minecraft</code> or <code>log-rotation</code> instead of
                    <code>Mine_craft</code> or <code>LogRotation</code>.
                </p>

                <p>
                    If your extension is intended to be used by others, consider prefixing the name to distinguish
                    it from extensions written by other people.
                    For example, if your org is named Acme Corp., consider using <code>acme-minecraft</code>
                    or <code>acme-log-rotation</code>.
                </p>
            </li>

            <li>
                <p>
                    Extensions should be designed with a single purpose in mind, and shared functionality (for
                    example, APIs) should be extracted into an interface or abstract class.
                </p>

                <p>
                    Don't put all of your bot's functionality into a single extension, especially if it has a lot
                    of features.
                    For example, use <code>ModerationExtension</code>, <code>MinecraftExtension</code> and
                    <code>LogRotationExtension</code> instead of just <code>MyBotExtension</code>.
                </p>
            </li>

            <li>
                <p>
                    While your extension class can be laid out however you prefer, we suggest the following order:
                </p>

                <list>
                    <li>
                        At the top, simple variables and constants, followed by variables and constants with custom
                        getters and setters.
                    </li>

                    <li>
                        Your <code>setup</code> function, followed by any other functions your extension needs.
                        It's also generally a good idea to split up public API and private functions.
                    </li>

                    <li>
                        Any command argument classes used by your extension, marked as <code>inner</code> classes.
                        Alternatively, it may be useful to factor these out into separate classes in their own files.
                    </li>

                    <li>
                        Any modal form classes used by your extension, marked as <code>inner</code> classes.
                        Alternatively, it may be useful to factor these out into separate classes in their own files.
                    </li>
                </list>

                <code-block lang="kotlin" collapsible="true" collapsed-title="Example Layout">
                    class MyExtension : Extension() {
                        // Simple variables and constants
                        override val name: String = "my"

                        val chatCommands: ChatCommandRegistry by inject()

                        // Setup function
                        override suspend fun setup() { }

                        // Public API
                        suspend fun myAction() { }

                        // Private functions
                        private suspend fun doAction() { }

                        // Command argument classes
                        inner class CommandArgs : Arguments() {

                        }

                        // Modal form classes
                        inner class MyForm : ModalForm() {

                        }
                    }
                </code-block>
            </li>
        </list>
    </chapter>

    <chapter title="Structure" id="structure">
        <p>
            All extensions must extend the <code>Extension</code> type.
            This type provides most of the logic behind your extensions, and it implements Kord Extensions'
            <a href="Koin.topic"><code>KoinComponent</code></a> types, giving you direct access to Koin's API.
        </p>

        <p>
            All extensions must implement the following:
        </p>

        <table style="header-row">
            <tr>
                <td>Name</td>
                <td>Type</td>
                <td>Description</td>
            </tr>

            <tr>
                <td><code>name</code></td>
                <td><code>String</code></td>

                <td>
                    Human-readable short extension name.
                    This should be <code>lowered-kebab-case</code> and must be unique, as it's used for logging and by
                    parts of the <code>ExtensibleBot</code> API to index and retrieve loaded extensions.
                </td>
            </tr>

            <tr id="setup-function">
                <td><code>setup</code></td>
                <td><code>suspend () -> Unit</code></td>

                <td>
                    This function is called when your extension is set up, and it should be used to register all of
                    its commands, event handlers, and other functionality.
                </td>
            </tr>
        </table>

        <warning>
            <p>
                While you may be able to access the bot's
                <a href="https://dokka.kord.dev/core/dev.kord.core/-kord/index.html"><code>Kord</code></a> instance in
                your <code>setup</code> function,
                <format style="bold">it is not safe to use during extension setup</format>.
                This is because extensions are set up before the bot attempts to connect to Discord, meaning you will
                no data will be available from Discord until later.
            </p>

            <p>
                Instead, consider creating an event handler for Kord's
                <a href="https://dokka.kord.dev/core/dev.kord.core.event.gateway/-ready-event/index.html">
                    <code>ReadyEvent</code>
                </a>,
                which will be fired when the bot has connected to Discord.
            </p>

            <p>
                <format style="bold">Note:</format> Once the bot has connected, feel free to use the bot's
                <a href="https://dokka.kord.dev/core/dev.kord.core/-kord/index.html"><code>Kord</code></a> instance as
                you please.
                This includes within event handler and command <code>action</code> blocks, as these will not be called
                unless the bot is connected to Discord.
            </p>
        </warning>

        <p>
            To react and respond to actions taken on Discord, you'll need to register the relevant abstractions in your
            <code>setup</code> function:
        </p>

        <list>
            <li>
                <a href="Events.topic">Event handlers</a>, which allow your bot to react to all kinds of things as they
                happen.
            </li>

            <li>
                <a href="Commands.topic">Commands</a>, which may be executed by users that share servers with your bot.
            </li>
        </list>

        <p>
            For more information, please see the relevant links above.
        </p>
    </chapter>

    <chapter title="Extension API" id="api">
        <p>
            The <code>Extension</code> type provides a fairly comprehensive API, which you can use to build out your
            bot's functionality.
            It also extends <a href="Koin.topic">KoinComponent</a>, providing easy access to other parts of Kord
            Extensions as necessary.
        </p>

        <note>
            <p>
                For the sake of brevity, the below tables do not provide an exhaustive list of APIs.
                You can find more information on the APIs that have been omitted throughout this documentation,
                including:
            </p>

            <list>
                <li><a href="Checks.topic" /></li>
                <li><a href="Commands.topic" /></li>
                <li><a href="Events.topic" /></li>
                <li><a href="Internationalization.topic" /></li>
                <li><a href="Utilities.topic" /></li>
            </list>
        </note>

        <chapter title="Functions" id="functions">
            <table style="header-row">
                <tr>
                    <td>Function</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>setup</code></td>

                    <td>
                        Extension setup function, as explained above.
                    </td>
                </tr>

                <tr>
                    <td><code>unload</code></td>

                    <td>
                        If your extension requires tear-down or cleanup steps to be run when it's unloaded, override
                        this function.
                        Called whenever the extension is disabled.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="properties">
            <p>
                The following properties are marked <code>open</code> and are intended to be overridden by extensions.
            </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Default</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>allowApplicationCommandsInDMs</code></td>
                    <td><code>Boolean</code></td>
                    <td><code>true</code></td>

                    <td>
                        Whether <a href="Commands.topic">application commands</a> registered by this extension should
                        be allowed in DMs by default.
                        May be overridden or set by your <code>setup</code> function.
                    </td>
                </tr>

                <tr>
                    <td><code>intents</code></td>
                    <td><code>MutableSet &lt;Intent&gt;</code></td>
                    <td><code>{ }</code></td>

                    <td>
                        Intents required by this extension, which will be automatically requested at bot startup.
                        This is populated automatically by event handlers and chat commands, but you can always add
                        other required intents if needed.
                    </td>
                </tr>

                <tr>
                    <td><code>name</code></td>
                    <td><code>String</code></td>
                    <td> </td>

                    <td>
                        Human-readable short extension name, as explained above.
                    </td>
                </tr>
            </table>

            <p>
                The following properties are set automatically, and you shouldn't need to modify them.
            </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>loaded</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        Whether the extension is currently loaded.
                        This is a short-hand reference to <code>state</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>state</code></td>
                    <td><code>ExtensionState</code></td>

                    <td>
                        The extension's loading state, which describes which state of its lifecycle it's currently in.
                    </td>
                </tr>
            </table>

            <p>
                The following properties provide quick access to various parts of Kord Extensions, via
                <a href="Koin.topic">Koin</a>.
            </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                </tr>

                <tr>
                    <td><code>applicationCommandRegistry</code></td>
                    <td><code>ApplicationCommandRegistry</code></td>
                </tr>

                <tr>
                    <td><code>bot</code></td>
                    <td><code>ExtensibleBot</code></td>
                </tr>

                <tr>
                    <td><code>chatCommandRegistry</code></td>
                    <td><code>ChatCommandRegistry</code></td>
                </tr>

                <tr>
                    <td><code>kord</code></td>
                    <td><code>Kord</code></td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>
