<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
	SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Custom Converters" id="Custom-Converters">

	<show-structure depth="2" />

	<note>
		This section will use
		<a href="https://github.com/Kord-Extensions/kord-extensions/blob/root/kord-extensions/src/main/kotlin/dev/kordex/core/commands/converters/impl/SnowflakeConverter.kt">
			the bundled Snowflake converter</a> as an example below.
	</note>

	<p>
		When the <a href="Converters.topic" anchor="bundled">bundled converters</a> don't meet your needs, you can
		create your own.
		Kord Extensions provides utilities that make creating your own converters easier, generating converter builder
		functions automatically.
	</p>

	<chapter title="Build Configuration" id="build-configuration">
		<p>
			Before getting started, you'll need to set up KSP and the converter annotation processor.
		</p>

		<tabs group="build-system">
			<tab group-key="gradle-kotlin" title="Gradle (Kotlin)">
				<p>
					First, add the dependencies to your <code>gradle/libs.versions.toml</code>.
					<a href="https://github.com/google/ksp/releases">Check GitHub</a> for the latest version of KSP.
				</p>

				<br/>

				<code-block lang="ini">
					[versions]
					kord-extensions = "%version%"
					ksp = "KSP VERSION HERE"

					[libraries]
					ksp = {
						module = "com.google.devtools.ksp:symbol-processing-api",
						version.ref = "ksp"
					}

					kord-extensions-processor = {
						module = "dev.kordex:annotation-processor",
						version.ref = "kord-extensions"
					}
				</code-block>

				<p>
					Then, update your <code>build.gradle.kts</code>.
				</p>

				<br/>

				<code-block lang="kotlin">
					plugins {
						// ...

						idea
						id("com.google.devtools.ksp") version "KSP VERSION HERE"
					}

					dependencies {
						// ...

						ksp(libs.kord.extensions.processor)
					}

					idea { // Fixes IntelliJ indexing and build optimisation
						module {
							// Not using += due to https://github.com/gradle/gradle/issues/8749
							// (Gradle closed this as fixed, but they broke it again)
							sourceDirs = sourceDirs +
								file("${layout.buildDirectory}/generated/ksp/main/kotlin")

							testSources.setFrom(
								testSources.from + file("${layout.buildDirectory}/generated/ksp/test/kotlin")
							)

							generatedSourceDirs = generatedSourceDirs +
								file("${layout.buildDirectory}/generated/ksp/main/kotlin") +
								file("${layout.buildDirectory}/generated/ksp/test/kotlin")
						}
					}
				</code-block>
			</tab>

			<tab group-key="gradle-groovy" title="Gradle (Groovy)">
				<p>
					First, add the dependencies to your <code>gradle/libs.versions.toml</code>.
					<a href="https://github.com/google/ksp/releases">Check GitHub</a> for the latest version of KSP.
				</p>

				<br/>

				<code-block lang="ini">
					[versions]
					kord-extensions = "%version%"
					ksp = "KSP VERSION HERE"

					[libraries]
					ksp = {
						module = "com.google.devtools.ksp:symbol-processing-api",
						version.ref = "ksp"
					}

					kord-extensions-processor = {
						module = "dev.kordex:annotation-processor",
						version.ref = "kord-extensions"
					}
				</code-block>

				<p>
					Then, update your <code>build.gradle</code>.
				</p>

				<br/>

				<code-block lang="groovy">
					plugins {
						// ...

						id "idea"
						id "com.google.devtools.ksp" version "KSP VERSION HERE"
					}

					dependencies {
						// ...

						ksp libs.kord.extensions.processor
					}

					idea { // Fixes IntelliJ indexing and build optimisation
						module {
							// Not using += due to https://github.com/gradle/gradle/issues/8749
							// (Gradle closed this as fixed, but they broke it again)
							sourceDirs = sourceDirs +
								file("${layout.buildDirectory}/generated/ksp/main/kotlin")

							testSources.setFrom(
								testSources.from + file("${layout.buildDirectory}/generated/ksp/test/kotlin")
							)

							generatedSourceDirs = generatedSourceDirs +
								file("${layout.buildDirectory}/generated/ksp/main/kotlin") +
								file("${layout.buildDirectory}/generated/ksp/test/kotlin")
						}
					}
				</code-block>
			</tab>

			<tab group-key="maven" title="Maven">
				<warning>
					<p>
						Kord Extensions is developed using Gradle, and none of the developers are familiar with Maven.
					</p>

					<p>
						If you know how to set this up using Maven, and you've tested that it all works, please feel free
						to contribute this section.
					</p>
				</warning>
			</tab>
		</tabs>
	</chapter>

	<chapter title="Converter Anatomy" id="anatomy">
		<p>
			All converters extend one of the converter base types.
			Most of your converters will inherit the <code>SingleConverter</code> type, and follow a strict structure.
			Once you've written your converter, you'll add the <code>@Converter</code> annotation, which will configure
			the annotation processor to generate your converter's builders and DSL functions.
		</p>

		<p>
			All converter types take a generic type parameter, referred to as <code>T</code>.
			This type represents the resulting rich type your converter provides to users when they finish parsing
			arguments.
			The only restriction for this type is that it canâ€™t be nullable.
		</p>

		<chapter title="Constructor" id="anatomy-constructor">
			<p>
				Your converter's constructor must take a single parameter, the
				<a href="Converters.topic" anchor="settings-all-validators">validator</a> provided by the user.
				This parameter should be nullable, default to <code>null</code>, and the validator's generic type
				parameter must match the one provided to your converter.
			</p>

			<p>
				The converter base types define this constructor parameter, so you'll need to override it.
			</p>

			<code-block lang="kotlin" collapsible="true" collapsed-title="Example: Snowflake Converter">
				public class SnowflakeConverter(
				    override var validator: Validator&lt;Snowflake&gt; = null
				) : SingleConverter&lt;Snowflake&gt;() {
					// ...
				}
			</code-block>

			<p>
				Your converter's constructor may take additional parameters, as defined in the
				<code>builderConstructorArguments</code> property in the <code>@Converter</code> annotation, and
				explained below.
			</p>
		</chapter>

		<chapter title="Properties" id="anatomy-properties">
			<p>
				Your converter must override some properties defined by the base converter types:
			</p>

			<table style="both">
				<tr>
					<td>Name</td>
					<td>Type</td>
					<td>Description</td>
				</tr>

				<tr>
					<td><code>signatureType</code></td>
					<td><code>Key</code></td>

					<td>
						<a href="Internationalization.topic" anchor="using-translations-translating-keys">
							Key object
						</a> referring to a short description
						explaining the type of data this converter handles.
						Shown in help commands for <a href="Chat-Commands.topic"/> and errors for all command types.
					</td>
				</tr>
			</table>

			<p>
				Additionally, you may override the following properties as required:
			</p>

			<table style="both">
				<tr>
					<td>Name</td>
					<td>Type</td>
					<td>Description</td>
				</tr>

				<tr>
					<td><code>errorType</code></td>
					<td><code>Key?</code></td>

					<td>
						<a href="Internationalization.topic" anchor="using-translations-translating-keys">
							Key object
						</a> representing a longer description for
						this converter's handled type than <code>signatureType</code>.
						Used in "invalid value" errors instead of <code>signatureType</code> if provided.
						Defaults to <code>null</code>.
					</td>
				</tr>

				<tr>
					<td><code>showTypeInSignature</code></td>
					<td><code>Boolean</code></td>

					<td>
						Whether the <code>signatureType</code> should be shown in help commands for
						<a href="Chat-Commands.topic"/>.
						Defaults to <code>true</code>
					</td>
				</tr>
			</table>

			<code-block lang="kotlin" collapsible="true" collapsed-title="Example: Snowflake Converter">
			    override val signatureType: Key = "converters.snowflake.signatureType"
			</code-block>
		</chapter>

		<chapter title="Functions" id="anatomy-functions">
			<p>
				Your converter must override some functions defined by the base converter types.
			</p>

			<chapter title="String Parsing" id="anatomy-functions-string">
				<p>
					All converter types must implement the <code>parse</code> function, responsible for parsing
					arguments from a stream of string-based tokens.
					<a href="Chat-Commands.topic"/> use this function to parse arguments from Discord messages into
					rich types.
				</p>

				<p>
					This function takes the following parameters:
				</p>

				<list>
					<li>
						<p>
							<code>parser: StringParser?</code> - Instance of Kord Extensions' String parser.
							Call <code>parser.parseNext()</code> to attempt to retrieve the next argument string token
							provided by the user.
						</p>

						<p>
							May be <code>null</code> when <code>named</code> is provided.
							Wrapping converters (e.g. <code>SingleToOptional</code>) used internally may also call
							<code>parse</code> with a <code>parser</code> value of <code>null</code>.
						</p>
					</li>

					<li>
						<p>
							<code>context: CommandContext</code> - <a href="Commands.topic" anchor="context-objects"/>
							representing the command being executed.
						</p>

						<p>
							<format style="bold">Note:</format> It is important your converter can parse arguments using
							only the API provided by the base <code>CommandContext</code> type.
							The converter may check the type and respond accordingly, but this parameter can be of
							an unusual context type that may exist for any number of purposes, and your converter
							can't break in these scenarios.
						</p>
					</li>

					<li>
						<code>named: String?</code> - Set when users provide values using keyword arguments.
						<format style="bold">Note:</format> It's important your converter prioritizes this
						parameter when provided, instead of trying to parse values from the <code>parser</code>.
					</li>
				</list>

				<p>
					This function must return a Boolean representing whether your converter managed to successfully
					parse a value - <code>true</code> if it did, and <code>false</code> otherwise.
					If your converter managed to parse a value, it must store that value in the <code>parsed</code>
					class property.
				</p>

				<p>
					To provide specific errors to users, your converter may throw a
					<a href="Exceptions.topic" anchor="functional-discord-relayed">
						<code>DiscordRelayedException</code></a>.
				</p>

				<code-block lang="kotlin" collapsible="true" collapsed-title="Example: Snowflake Converter">
				    override suspend fun parse(parser: StringParser?, context: CommandContext, named: String?): Boolean {
						// Use `named`, try the parser, then give up if neither are present.
				        val arg: String = named ?: parser?.parseNext()?.data ?: return false

				        try {
							// Try to parse the value and store it.
				            this.parsed = Snowflake(arg)
				        } catch (e: NumberFormatException) {
							// Invalid Snowflake, supply a relevant error to the user.
				            throw DiscordRelayedException(
				                context.translate("converters.snowflake.error.invalid", replacements = arrayOf(arg))
				            )
				        }

						// Parsing was successful, report that by returning `true`.
				        return true
				    }
				</code-block>
			</chapter>

			<chapter title="Slash Commands" id="anatomy-functions-slash">
				<p>
					All converter types that extend <code>SlashCommandConverter</code> (which includes all converters
					that extend <code>SingleConverter</code>) must implement two additional functions.
				</p>

				<list>
					<li>
						<code>toSlashOption</code> - Convert the given <code>Argument</code> parameter to the
						corresponding Kord
						<a href="https://dokka.kord.dev/rest/dev.kord.rest.builder.interaction/-options-builder/index.html">
							<code>OptionsBuilder</code></a> subtype.

						For most converter types,
						<a href="https://dokka.kord.dev/rest/dev.kord.rest.builder.interaction/-string-choice-builder/index.html">
							<code>StringChoiceBuilder</code></a> will be the best option.
					</li>

					<li>
						<code>parseOption</code> - Using the given
						<a href="Commands.topic" anchor="context-objects">command context object</a>, parse the Kord
						<a href="https://dokka.kord.dev/core/dev.kord.core.entity.interaction/-option-value/index.html">
							<code>OptionValue</code></a> into the converter's rich type.
						This function behaves similarly to the <code>parse</code> function mentioned in
						<a anchor="anatomy-functions-string">the previous section</a>.
					</li>
				</list>

				<code-block lang="kotlin" collapsible="true" collapsed-title="Example: Snowflake Converter">
					override suspend fun toSlashOption(arg: Argument&lt;*&gt;): OptionsBuilder =
						StringChoiceBuilder(arg.displayName, arg.description).apply { required = true }

					override suspend fun parseOption(context: CommandContext, option: OptionValue&lt;*&gt;): Boolean {
						// Get the correct option value type, and give up if an unexpected type is provided.
						val optionValue = (option as? StringOptionValue)?.value ?: return false

						try {
							// Try to parse the value and store it.
							this.parsed = Snowflake(optionValue)
						} catch (e: NumberFormatException) {
							// Invalid Snowflake, supply a relevant error to the user.
							throw DiscordRelayedException(
								context.translate(&quot;converters.snowflake.error.invalid&quot;, replacements = arrayOf(optionValue))
							)
						}

						// Parsing was successful, report that by returning `true`.
						return true
					}
				</code-block>
			</chapter>
		</chapter>
	</chapter>

	<chapter title="@Converter Annotation" id="converter-annotation">
		<p>
			Once you've written your converter, it should something like the example below.
		</p>

		<code-block lang="kotlin" collapsible="true" collapsed-title="Example: Snowflake Converter">
			public class SnowflakeConverter(
				override var validator: Validator&lt;Snowflake&gt; = null
			) : SingleConverter&lt;Snowflake&gt;() {
				override val signatureType: Key = &quot;converters.snowflake.signatureType&quot;

				override suspend fun parse(parser: StringParser?, context: CommandContext, named: String?): Boolean {
					val arg: String = named ?: parser?.parseNext()?.data ?: return false

					try {
						this.parsed = Snowflake(arg)
					} catch (e: NumberFormatException) {
						throw DiscordRelayedException(
							context.translate(&quot;converters.snowflake.error.invalid&quot;, replacements = arrayOf(arg))
						)
					}

					return true
				}

				override suspend fun toSlashOption(arg: Argument&lt;*&gt;): OptionsBuilder =
					StringChoiceBuilder(arg.displayName, arg.description).apply { required = true }

				override suspend fun parseOption(context: CommandContext, option: OptionValue&lt;*&gt;): Boolean {
					val optionValue = (option as? StringOptionValue)?.value ?: return false

					try {
						this.parsed = Snowflake(optionValue)
					} catch (e: NumberFormatException) {
						throw DiscordRelayedException(
							context.translate(&quot;converters.snowflake.error.invalid&quot;, replacements = arrayOf(optionValue))
						)
					}

					return true
				}
			}
		</code-block>

		<p>
			This converter is functional, but it still needs converter functions before users can define arguments with
			it.
			To make this easier, Kord Extensions provides a special <code>@Converter</code> annotation that will
			generate everything you need.
		</p>

		<p>
			To use it, annotate your converter class with <code>@Converter</code> and provide the relevant parameters.
		</p>

		<code-block lang="kotlin" collapsible="true" collapsed-title="Example: Snowflake Converter">
			@Converter(
			    "snowflake",

			    types = [ConverterType.DEFAULTING, ConverterType.LIST, ConverterType.OPTIONAL, ConverterType.SINGLE]
			)
		</code-block>

		<table>
			<tr>
				<td>Name</td>
				<td>Type</td>
				<td>Description</td>
			</tr>

			<tr id="annotation-parameters-required:header:text:center">
				<td colspan="3">
					Required Parameters
				</td>
			</tr>

			<tr>
				<td><code>names</code></td>
				<td><code>vararg String</code></td>

				<td>
					<p>
						Converter name, used to generate the names of the converter DSL functions.
						Ideally a single, lower-case word.
					</p>

					<p>
						When specified, multiple names will result in a set of DSL functions for each provided name.
						This may be useful for converters using words that differ in different English dialects, such
						as "color" and "colour."
					</p>
				</td>
			</tr>

			<tr>
				<td><code>types</code></td>
				<td><code>Array&lt;ConverterType&gt;</code></td>

				<td>
					<p>
						Array of <code>ConverterType</code> enum entries.
					</p>

					<list>
						<li>
							<p>
								First, provide <code>SINGLE</code> or <code>COALESCING</code> based on your converter's
								base type.
							</p>

							<list>
								<li>
									<code>SingleConverter</code> - provide <code>SINGLE</code>.
								</li>

								<li>
									<code>CoalescingConverter</code> - provide <code>COALESCING</code>.
								</li>
							</list>

							<p>
								<format style="bold">
									These options are mutually exclusive and cannot be provided together.
								</format>
							</p>
						</li>

						<li>
							Converters extending <code>ChoiceConverter</code> must additionally provide
							<code>CHOICE</code>.
						</li>

						<li>
							Any combination of <code>DEFAULTING</code>, <code>LIST</code> and <code>OPTIONAL</code> may
							be additionally provided as desired.
						</li>
					</list>
				</td>
			</tr>

			<tr id="annotation-parameters-optional:header:text:center">
				<td colspan="3">
					Optional Parameters
				</td>
			</tr>

			<tr id="annotation-parameters-imports:div:bottom">
				<td><code>imports</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					Extra imports required by your converter.
					These will be provided in all generated files.
				</td>
			</tr>

			<tr>
				<td><code>builderConstructorArguments</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					<p>
						Arguments to add to the generated builders' constructors.
						This must be a full definition (including visibility modifiers and <code>val/var</code>).
					</p>

					<p>
						Prefix an argument with <code>!!</code> to prevent it from being passed into the converter's
						constructor.
					</p>
				</td>
			</tr>

			<tr>
				<td><code>builderGeneric</code></td>
				<td><code>String</code></td>

				<td>
					Generic type parameter that the generated builders should take.
					This must be a full definition (including name and type bound), and multiple may be provided.
				</td>
			</tr>

			<tr>
				<td><code>builderFields</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					<p>
						Extra fields that will be defined within the generated builders.
						This must be a full definition (including visibility modifiers and <code>val/var</code>).
					</p>

					<p>
						For required values that users must provide, use <code>lateinit var</code>.
					</p>
				</td>
			</tr>

			<tr id="annotation-parameters-builder-general:div:bottom">
				<td><code>builderSuffixedWhere</code></td>
				<td><code>String</code></td>

				<td>
					Extra bounds for the generated builders' generic type parameters,
					to be provided after <code>where</code> in their signatures.
				</td>
			</tr>

			<tr>
				<td><code>builderBuildFunctionPreStatements</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					Extra lines of code to add to the generated builders' <code>build</code> functions before the
					converter object is constructed.
				</td>
			</tr>

			<tr>
				<td><code>builderBuildFunctionStatements</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					Extra lines of code to add to the generated builders' <code>build</code> functions after the
					converter object is constructed.
				</td>
			</tr>

			<tr>
				<td><code>builderInitStatements</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					Extra lines of code to add to the generated builders' <code>init</code> blocks.
				</td>
			</tr>

			<tr id="annotation-parameters-builder-statements:div:bottom">
				<td><code>builderExtraStatements</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					Extra lines of code to add to the generated builders' class bodies, after their <code>init</code>
					blocks and fields.
				</td>
			</tr>

			<tr>
				<td><code>functionBuilderArguments</code></td>
				<td><code>Array&lt;String&gt;</code></td>

				<td>
					Arguments to add to the generated builder functions, which will be passed into the builders'
					constructors.
					This must be a full definition (including name and type).
				</td>
			</tr>

			<tr>
				<td><code>functionGeneric</code></td>
				<td><code>String</code></td>

				<td>
					<p>
						Generic type parameter that the generated builder functions should take.
						This must be a full definition (including name and type bound), and it will be
						<code>reified</code> automatically.
					</p>

					<p>
						Only one type parameter is currently supported.
					</p>
				</td>
			</tr>

			<tr>
				<td><code>functionSuffixedWhere</code></td>
				<td><code>String</code></td>

				<td>
					Extra bounds for the generated builder functions' type parameters,
					to be provided after <code>where</code> in their signatures.
				</td>
			</tr>
		</table>

		<p>
			Code will be generated when the <code>build</code> project is compiled, and you can find it in your
			project's <code>build/</code> folder, under <code>generated/main/kotlin/</code>.
			Kord Extensions aims to generate well-formatted code, and it includes comments to illustrate precisely
			where code will be injected.
		</p>

		<p>
			As <a href="Converters.topic" anchor="bundled">the bundled converters</a> make use of the annotation
			processor, you can look at them for more examples.

			They can be found
			<a href="https://github.com/Kord-Extensions/kord-extensions/tree/root/kord-extensions/src/main/kotlin/dev/kordex/core/commands/converters/impl">
				on GitHub</a>.
		</p>
	</chapter>

	<chapter title="Using Custom Converters" id="using">
		<p>
			Your custom converters may be used in the same manner described on the
			<a href="Converters.topic" anchor="usage">converters page</a>.
			Create <a href="Commands.topic" anchor="arguments-classes">an Arguments class</a>, define arguments using
			your converter's builder functions, and use it in your command definitions.
		</p>
	</chapter>
</topic>
