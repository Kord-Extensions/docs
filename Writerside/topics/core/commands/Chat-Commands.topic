<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Chat Commands" id="Chat-Commands">

    <warning>
        <p>
            <format style="bold">Privileged Intents and You</format>
        </p>

        <p>
            Chat commands require the use of the "message content" privileged intent.
            While chat commands were traditionally how users interacted with bots on Discord,
            <format style="bold">this is no longer what Discord recommends or encourages for your bots.</format>
        </p>

        <p>
            If your bot is on 75 or more guilds (or you plan to grow it to that point), you should consider using
            <a href="Application-Commands.topic"/> instead of chat commands as much as possible.
        </p>

        <p>
            Your bot will need to go through a verification process (which starts at 75 guilds) before it can join
            over 100 guilds.
            Discord
            <format style="bold">will not verify bots</format>
            that are using the "message content" privileged
            intent without a good reason for it.
        </p>

        <p>
            The only situations that we advise you to use chat commands for are
            <format style="bold">
                those where the other types of commands provide an objectively worse user experience.
            </format>
            This largely only applies to commands that need to take a large amount of text as input (where modals do
            not suffice), or where your bot needs
            to make use of file attachments uploaded to Discord without downloading them.
        </p>

        <p>
            Additionally, it's worth noting that
            <format style="bold">
                the Discord client encourages users to make use of <a href="Slash-Commands.topic"/>
            </format>
            when they attempt to use a chat command.
            This means that users will expect your bots
            to support <a href="Application-Commands.topic"/> as a default mode of interaction.
        </p>
    </warning>

    <note>
        <p>
            <format style="bold">Maintenance status</format>
        </p>

        <p>
            Due to the situation explained in the above warning,
            <format style="bold">
                chat commands are not regularly used or tested by Kord Extensions' users or developers.
            </format>
            As a result, there may be small bugs or formatting problems that we haven't noticed or had time to fix.
        </p>

        <p>
            If you run into any problems with the chat commands framework or its help extension, please let us know
            or submit a Pull Request to address the issue.
        </p>
    </note>

    <p>
        Please don't skip over the above admonitions â€” they're important!
    </p>

    <chapter title="Introduction" id="intro">
        <p>
            Chat commands are a fairly simple concept.
            When a user sends a message starting with a command prefix (or bot mention), the command name and arguments,
            Kord Extensions can process it accordingly.
        </p>

        <p>
            All builder functions should be called within your bot's <code>setup</code> function when you're
            registering commands before the bot starts up.
            However, it is also possible to register commands later on in the bot's lifecycle by calling the same
            functions.
        </p>

        <p>
            Chat commands support command arguments, which are specified as explained on
            <a href="Commands.topic" anchor="arguments-classes">the commands overview page</a>.
            However, unlike the other command types, they do not support <a href="Modals.topic"/>.
        </p>

        <p>
            As Discord recommends against using chat commands, they must be enabled before they can be used.
            For more information, see <a href="Config-Commands.topic">the configuration documentation</a>.
        </p>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Usage example">
            chatCommand(::MyArguments) {
                name = "my-command"
                description = "Description explaining command usage."

                check { hasPermission(Permission.MentionEveryone) }

                aliases = arrayOf("my", "mycommand")

                action {
                    message.respond(
                        "User ${arguments.user.mention} has permission to mention everyone."
                    )
                }
            }
        </code-block>
    </chapter>

    <chapter title="Extension API" id="extension-api">
        <p>
            The following APIs are available on the <code>Extension</code> type, which you can use to define your
            chat commands and modify their behavior.
        </p>

        <chapter title="Builders" id="extension-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr id="extension-builders-checks:div:bottom">
                    <td><code>chatCommandCheck</code></td>
                    <td><code>CheckWithCache&lt;MessageCreateEvent&gt;</code></td>

                    <td>
                        Register a check that must pass for the <code>action</code>
                        belonging to all chat commands defined within this extension to be run.
                        For more information on checks, see <a href="Checks.topic">the dedicated documentation</a>.
                    </td>
                </tr>

                <tr>
                    <td><code>chatCommand</code></td>
                    <td><code>ChatCommand</code></td>

                    <td>
                        Register a <a anchor="standalone">standalone chat command</a>.
                        This builder function optionally takes the constructor of an
                        <a href="Commands.topic" anchor="arguments-classes">arguments class</a> as the first argument,
                        representing this command's arguments to be supplied on Discord.
                    </td>
                </tr>

                <tr>
                    <td><code>chatGroupCommand</code></td>
                    <td><code>ChatGroupCommand</code></td>

                    <td>
                        Register a <a anchor="grouped">grouped chat command</a>.
                        This builder function optionally takes the constructor of an
                        <a href="Commands.topic" anchor="arguments-classes">arguments class</a> as the first argument,
                        representing this command's arguments to be supplied on Discord.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Standalone Commands" id="standalone">
        <p>
            Standalone commands are the simplest type of chat command, and they're defined using the
            <code>chatCommand</code> builder function.
            This builder is a receiver function against the <code>ChatCommand</code> type, which provides a number of
            APIs that can be used to configure your command and its metadata.
        </p>

        <p>
            At minimum, a command must have a <code>name</code>, <code>description</code> and <code>action</code>
            defined.
        </p>

        <p>
            The following APIs are available for use when writing a chat command, in addition to those provided by
            <a href="Commands.topic" anchor="command-objects">the base <code>Command</code> type</a>.
        </p>

        <chapter title="Builders" id="standalone-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr id="standalone-builders-required:header:text:center">
                    <td colspan="3">
                        Required Builders
                    </td>
                </tr>

                <tr>
                    <td><code>action</code></td>
                    <td><code>ChatCommandContext&lt;Arguments&gt;</code></td>

                    <td>
                        <format style="bold">Required:</format>
                        Register the command's action, which will be run when
                        the command is invoked.
                        Provide the constructor for an <code>Arguments</code> subtype as the first argument to this
                        function if your command takes any arguments.
                    </td>
                </tr>

                <tr id="standalone-builders-optional:header:text:center">
                    <td colspan="3">
                        Optional Builders
                    </td>
                </tr>

                <tr>
                    <td><code>check</code></td>
                    <td><code>CheckWithCache&lt;MessageCreateEvent&gt;</code></td>

                    <td>
                        Register a check that must pass for the command's <code>action</code> to be run.
                        For more information on checks, see <a href="Checks.topic">the dedicated documentation</a>.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="standalone-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr id="standalone-properties-required:header:text:center">
                    <td colspan="3">
                        Required Properties
                    </td>
                </tr>

                <tr>
                    <td><code>description</code></td>
                    <td><code>String</code></td>

                    <td>
                        <format style="bold">Required:</format>
                        The command's description.
                        This should be a string that explains what the command does.
                        If the string spans multiple lines, the first line should be a short summary of what the
                        command does, with a blank line underneath.
                    </td>
                </tr>

                <tr>
                    <td><code>name</code></td>
                    <td><code>String</code></td>

                    <td>
                        <format style="bold">Required:</format>
                        The command's name, which is used to identify the command internally and for invoking the
                        command on Discord.
                    </td>
                </tr>

                <tr id="standalone-properties-optional:header:text:center">
                    <td colspan="3">
                        Optional Properties
                    </td>
                </tr>

                <tr>
                    <td><code>aliases</code></td>
                    <td><code>Array&lt;String&gt;</code></td>

                    <td>
                        Array of alternative names that may be used to invoke this command.
                        If an alias conflicts with the name of another command, the other command will take priority.
                        Ignored if <code>aliasKey</code> is set.
                    </td>
                </tr>

                <tr>
                    <td><code>allowKeywordArguments</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        Whether to allow the parser to parse arguments in the form of <code>key=value</code> or
                        <code>--key value</code>.
                        Defaults to <code>true</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>enabled</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        Whether this command is currently enabled, which can be changed at runtime if needed.
                        When disabled, a command can't be invoked and won't be shown in help commands.
                        Defaults to <code>true</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>hidden</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        Whether this command should be hidden from help command listings.
                        Hidden commands may still be invoked.
                        Defaults to <code>false</code>.
                    </td>
                </tr>

                <tr>
                    <td><code>localeFallback</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        By default, translated command names may be invoked based on the bot's configured
                        <a href="Config-Internationalization.topic" anchor="builders">locale resolvers</a>.
                        By setting this property to <code>true</code>, Kord Extensions will attempt to find a
                        command using the bot's default locale when it can't be found under the resolved one.
                        Defaults to <code>false</code>.
                    </td>
                </tr>

                <tr id="standalone-properties-translation:header:text:center">
                    <td colspan="3">
                        Translation-Related Properties
                    </td>
                </tr>

                <tr>
                    <td><code>aliasKey</code></td>
                    <td><code>String?</code></td>

                    <td>
                        <a href="Internationalisation.topic">Translation key</a>
                        referencing a comma-separated list of alternative command names.
                        If this property is set, the <code>aliases</code> list is ignored.
                    </td>
                </tr>

                <tr>
                    <td><code>signature</code></td>
                    <td><code>String?</code></td>

                    <td>
                        <p>
                            <a href="Internationalisation.topic">Translation key</a>
                            referencing the command signature to be shown in help commands.
                            By default, Kord Extensions will generate a signature automatically.
                            This property may be set if you wish to override it.
                        </p>

                        <p>
                            Command signatures should not include the command name.
                            Example signature: <code>&lt;required: user&gt; [option: string = default...]</code>
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Grouped Commands" id="grouped">
        <p>
            Grouped commands are a special type of chat command that contains subcommands.
            They work just like a <a anchor="standalone">standalone chat command</a>, but with the addition of a
            set of functions that allow you to nest other commands within them.
            They're defined using the <code>chatGroupCommand</code> builder function.
        </p>

        <p>
            To execute a grouped command, you provide the command prefix, name and arguments the same way you do with
            a standalone command.
            However, the first argument provided to the grouped command will be matched against the names of any
            nested commands, and removed from the list of arguments provided to the found command.
        </p>

        <p>
            Grouped commands may contain subcommands or nested grouped commands.
            There is no limit on how deep you may nest grouped commands, but we recommend you avoid nesting them
            more than once, for the sake of clarity and ease of use.
        </p>

        <p>
            The grouped command's <code>action</code> is executed when the command is executed without any arguments,
            or when none of the nested commands match the first argument provided to it.
            A default <code>action</code> block is provided, which shows help information about the command and its
            nested commands.
            However, you may provide your own if needed or desirable.
        </p>

        <p>
            The following APIs are available for use when writing a grouped chat command, in addition to those
            provided by <a anchor="standalone">the base <code>ChatCommand</code> type.</a>.
        </p>

        <chapter title="Builders" id="grouped-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>chatCommand</code></td>

                    <td>
                        Define a subcommand.
                        This builder function mirrors the behavior of the <code>chatCommand</code> builder function
                        defined at <code>Extension</code> level, which you'd normally use to register standalone
                        commands.
                    </td>
                </tr>

                <tr>
                    <td><code>chatGroupCommand</code></td>

                    <td>
                        Define a grouped subcommand.
                        This builder function allows you to nest grouped commands as deeply as is required.
                        It mirrors the behavior of the <code>chatGroupCommand</code> builder function defined at
                        <code>Extension</code> level.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Command Context" id="context">
        <p>
            The <code>ChatCommandContext</code> type is the receiver for all chat command <code>action</code> blocks.
            This type provides relevant APIs on top of the
            <a href="Commands.topic" anchor="context-objects">base command context object type</a>, allowing you to
            efficiently respond to command invocations.
        </p>

        <p>
            The following additional APIs are provided:
        </p>

        <chapter title="Builders" id="context-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>paginator</code></td>
                    <td><code>PaginatorBuilder</code></td>

                    <td>
                        <p>
                            Convenience function, allowing you to easily create a button-based
                            <a href="Paginators.topic">paginator</a>.
                            The following parameters are supported:
                        </p>

                        <list>
                            <li>
                                <code>defaultGroup = ""</code> - The default paginator group.
                            </li>

                            <li>
                                <code>pingInReply = true</code> - Whether to ping the author of the
                                <code>targetMessage</code> in reply, if it's specified.
                            </li>

                            <li>
                                <code>targetChannel</code> - Channel to send the paginator to.
                                <format style="bold">Required if <code>targetMessage</code> is not specified.</format>
                            </li>

                            <li>
                                <code>targetMessage</code> - Message to send the paginator in response to.
                                <format style="bold">Required if <code>targetChannel</code> is not specified.</format>
                            </li>
                        </list>

                        <p>
                            <format style="bold">Note:</format> This will not send the paginator automatically.
                            You'll need to call the <code>send</code> function on this function's return value to
                            send it.
                        </p>

                        <p>
                            For more information on paginators (and the paginator builder), see
                            <a href="Paginators.topic">the dedicated documentation</a>.
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Functions" id="context-functions">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Parameters</td>
                    <td>Description</td>
                </tr>

                <tr id="context-functions-normal:div:bottom">
                    <td><code>sendHelp</code></td>
                    <td> </td>

                    <td>
                        Generate and send help information for this command.
                        Returns <code>true</code> when a
                        <a href="Config-Extensions.topic" anchor="help">help extension</a> is loaded and the help
                        message was sent, and <code>false</code> otherwise.
                    </td>
                </tr>

                <tr id="context-functions-translation:header:text:center">
                    <td colspan="3">
                        Translation-Related Functions
                    </td>
                </tr>

                <tr>
                    <td><code>Message.respondTranslated</code></td>

                    <td>
                        <a href="Internationalisation.topic"><code>key</code></a>,
                        <a href="Internationalisation.topic"><code>replacements</code></a>,
                        <code>useReply = true</code>
                    </td>

                    <td>
                        <p>
                            Convenience function that allows you to respond to a message with translated content, using
                            the resolved locale for this command context.
                            This makes use of the <code>respond</code>
                            <a href="Messages.topic">message utility function</a>, with the <code>useReply</code>
                            parameter directly provided to it.
                        </p>

                        <p>
                            For more information,
                            see <a href="Internationalisation.topic">the dedicated documentation</a>.
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="context-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>arguments</code></td>
                    <td><code>T: Arguments</code></td>

                    <td>
                        <p>
                            The command's arguments, parsed into the
                            <a href="Commands.topic" anchor="arguments-classes">arguments class</a>
                            you specified the constructor for when you registered this command.
                        </p>

                        <p>
                            If you don't specify the aforementioned constructor, this will be an empty
                            <code>Arguments</code> object.
                        </p>
                    </td>
                </tr>


                <tr id="context-properties-translation:header:text:center">
                    <td colspan="3">
                        Data Properties
                    </td>
                </tr>

                <tr>
                    <td><code>channel</code></td>
                    <td><code>MessageChannelBehavior</code></td>

                    <td>
                        Object representing the channel this command was invoked within.
                    </td>
                </tr>

                <tr>
                    <td><code>guild</code></td>
                    <td><code>GuildBehavior?</code></td>

                    <td>
                        Object representing the guild this command was invoked within, or <code>null</code> if it was
                        invoked in a DM.
                    </td>
                </tr>

                <tr>
                    <td><code>member</code></td>
                    <td><code>MemberBehavior?</code></td>

                    <td>
                        Object representing the member that executed this command, or <code>null</code> if it was
                        invoked in a DM or by a webhook.
                    </td>
                </tr>

                <tr>
                    <td><code>message</code></td>
                    <td><code>Message</code></td>

                    <td>
                        Object representing the message that invoked this command.
                    </td>
                </tr>

                <tr>
                    <td><code>user</code></td>
                    <td><code>UserBehavior?</code></td>

                    <td>
                        Object representing the user that executed this command, or <code>null</code> if it was
                        invoked by a webhook.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>