<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Slash Commands" id="Slash-Commands">

    <p>
        Slash commands are a form of <a href="Application-Commands.topic">application command</a>, triggered by users
        by typing a slash (<code>/</code>) followed by the command's name and arguments, and sending it via
        Discord's message input box.
    </p>

    <p>
        When registered by your bot, slash commands are visible in a menu displayed above Discord's message
        input box when a user types a slash (<code>/</code>) into it.
        This menu allows users to browse a list of all available slash commands, and provides access to their
        descriptions and arguments.
    </p>

    <note>
        Slash commands support <a href="Commands.topic" anchor="arguments-classes">command arguments</a> and
        <a href="Commands.topic" anchor="modal-forms">modal forms</a>.
        However, there are features and types of argument converters that are unique to slash commands,
        and other types of converters that slash commands do not support.
        For more information on this, see <a href="Converters.topic">the dedicated documentation</a>.
    </note>

    <p>
        All builder functions should be called within your extension's <code>setup</code> function when you're
        registering commands before the bot starts up.
        However, it is also possible to register commands later on in the bot's lifecycle by calling the same
        functions.
    </p>

    <code-block lang="kotlin" collapsible="true" collapsed-title="Usage example">
        publicSlashCommand(::MyArguments) {
            name = "my-command"
            description = "Description explaining command usage."

            check { hasPermission(Permission.MentionEveryone) }

            action {
                respond {
                    // Note: Slash commands aren't actually able to mention
                    // users in most cases

                    content = "Hey, ${arguments.user.mention}! Get pinged!"
                }
            }
        }
    </code-block>

    <chapter title="Extension API" id="extension-api">
        The following APIs are available on the <code>Extension</code> type, which you can use to define your
        slash commands and modify their behavior.

        <chapter title="Builders" id="extension-api-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr id="extension-api-builders-checks:header:text:center">
                    <td colspan="3">
                        Checks
                    </td>
                </tr>

                <tr>
                    <td><code>slashCommandCheck</code></td>
                    <td><code>CheckWithCache &lt;ChatInputCommandInteractionCreateEvent&gt;</code></td>

                    <td>
                        Register a check that must pass for the <code>action</code>
                        belonging to all slash commands defined within this extension to be run.
                        For more information on checks, see <a href="Checks.topic">the dedicated documentation</a>.
                    </td>
                </tr>

                <tr id="extension-api-builders-commands:header:text:center">
                    <td colspan="3">
                        Commands
                    </td>
                </tr>

                <tr>
                    <td><code>ephemeralSlashCommand</code></td>
                    <td><code>EphemeralSlashCommand</code></td>

                    <td>
                        Register an ephemeral slash command.
                        This builder function optionally takes the constructor of an
                        <a href="Commands.topic" anchor="arguments-classes">arguments class</a>,
                        the constructor of a <a href="Commands.topic" anchor="modal-forms">modal form class</a>,
                        or both.
                    </td>
                </tr>

                <tr>
                    <td><code>publicSlashCommand</code></td>
                    <td><code>PublicSlashCommand</code></td>

                    <td>
                        Register a public slash command.
                        This builder function optionally takes the constructor of an
                        <a href="Commands.topic" anchor="arguments-classes">arguments class</a>,
                        the constructor of a <a href="Commands.topic" anchor="modal-forms">modal form class</a>,
                        or both.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Standalone Commands" id="standalone">
        <p>
            Standalone commands are the simplest type of slash command, and they're defined using the builder function
            corresponding with the intended interaction response type:
        </p>

        <list>
            <li><code>ephemeralSlashCommand</code> for slash commands that respond ephemerally.</li>
            <li><code>publicSlashCommand</code> for slash commands that respond publicly.</li>
        </list>

        <p>
            Slash commands extend
            <a href="Application-Commands.topic" anchor="commands">the <code>ApplicationCommand</code> type</a>,
            and provide some additional APIs.
            However, both ephemeral and public slash commands provide an identical API.
        </p>

        <chapter title="Builders" id="standalone-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr id="standalone-builders-required:header:text:center">
                    <td colspan="3">
                        Required Builders
                    </td>
                </tr>

                <tr>
                    <td><code>action</code></td>
                    <td><code>SlashCommandContext &lt;Arguments&gt;</code></td>

                    <td>
                        <p>
                            <format style="bold">Required:</format> Register the command's action, which will be run
                            when the command is invoked.
                            If you provide the constructor for a
                            <a href="Commands.topic" anchor="modal-forms">modal form class</a> to the registration
                            function, it will be passed to this builder as the first argument.
                        </p>

                        <p>
                            <format style="bold">Note:</format> If your command contains any
                            <a anchor="subcommands">subcommands</a> or
                            <a anchor="command-groups">command groups</a>,
                            then you may not specify an <code>action</code> block.
                            Slash commands containing nested commands are not executable on their own.
                        </p>
                    </td>
                </tr>

                <tr id="standalone-builders-optional:header:text:center">
                    <td colspan="3">
                        Optional Builders
                    </td>
                </tr>

                <tr>
                    <td><code>check</code></td>
                    <td><code>CheckWithCache &lt;ChatInputCommandInteractionCreateEvent&gt;</code></td>

                    <td>
                        Register a check that must pass for this command's <code>action</code> to be run.
                        For more information on checks, see <a href="Checks.topic">the dedicated documentation</a>.
                    </td>
                </tr>

                <tr id="standalone-builders-nested-command:header:text:center">
                    <td colspan="3">
                        Nested Command Builders
                    </td>
                </tr>

                <tr>
                    <td><code>group</code></td>
                    <td><code>SlashGroup</code></td>

                    <td>
                        Register a <a anchor="command-groups">command group</a>.
                        This builder function takes the name of the command group as its first argument.
                        Nested commands inherit the checks that are defined in their parent commands.
                    </td>
                </tr>

                <tr>
                    <td><code>ephemeralSubCommand</code></td>
                    <td><code>EphemeralSlashCommand</code></td>

                    <td>
                        Register an ephemeral <a anchor="subcommands">subcommand</a>.
                        Nested commands inherit the checks that are defined in their parent commands.
                    </td>
                </tr>

                <tr>
                    <td><code>publicSubCommand</code></td>
                    <td><code>PublicSlashCommand</code></td>

                    <td>
                        Register a public <a anchor="subcommands">subcommand</a>.
                        Nested commands inherit the checks that are defined in their parent commands.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="standalone-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr id="standalone-properties-required:header:text:center">
                    <td colspan="3">
                        Required Properties
                    </td>
                </tr>

                <tr>
                    <td><code>description</code></td>
                    <td><code>String</code></td>

                    <td>
                        <format style="bold">Required:</format> The command's description, which must be a string that
                        explains what the command does.
                        This string may not be longer than 100 characters.
                    </td>
                </tr>

                <tr id="standalone-properties-other:header:text:center">
                    <td colspan="3">
                        Other Properties
                    </td>
                </tr>

                <tr>
                    <td><code>parentCommand</code></td>
                    <td><code>SlashCommand?</code></td>

                    <td>
                        This command's parent slash command, if it's a <a anchor="subcommands">subcommand</a>.
                    </td>
                </tr>

                <tr>
                    <td><code>parentGroup</code></td>
                    <td><code>SlashGroup?</code></td>

                    <td>
                        This command's parent <a anchor="command-groups">command group</a>, if it's a
                        <a anchor="subcommands">subcommand</a> that's part of a group.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Subcommands" id="subcommands">
        <p>
            Slash commands may contain subcommands, which allow you to create a tree of executable commands.
            Subcommands are executed by providing the name of the subcommand as an argument to its parent command.
            They may be registered by calling the relevant builder functions from within a
            <a anchor="standalone">standalone command</a> or <a anchor="command-groups">command group</a>:
        </p>

        <list>
            <li><code>ephemeralSubCommand</code> for slash commands that respond ephemerally.</li>
            <li><code>publicSubCommand</code> for slash commands that respond publicly.</li>
        </list>

        <p>
            Subcommands have an identical API to <a anchor="standalone">standalone commands</a>.
            Additionally, they inherit the checks defined in their parent commands.
        </p>
    </chapter>

    <chapter title="Command Groups" id="command-groups">
        <p>
            Slash commands may contain command groups, which allow you to provide a nested group of
            <a anchor="subcommands">subcommands</a>.
            Grouped commands inherit the checks that are defined in the group's parent command.
        </p>

        <p>
            Command groups are not executable on their own, acting only as containers for related subcommands.
            Because of this, they provide a much smaller set of APIs.
        </p>

        <chapter title="Builders" id="command-group-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Receiver</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>ephemeralSubCommand</code></td>
                    <td><code>EphemeralSlashCommand</code></td>

                    <td>
                        Register an ephemeral <a anchor="subcommands">subcommand</a> to this group.
                        Grouped commands inherit the checks that are defined in the group's parent command.
                    </td>
                </tr>

                <tr>
                    <td><code>publicSubCommand</code></td>
                    <td><code>PublicSlashCommand</code></td>

                    <td>
                        Register a public <a anchor="subcommands">subcommand</a> to this group.
                        Grouped commands inherit the checks that are defined in the group's parent command.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="command-group-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr id="command-group-properties-required:header:text:center">
                    <td colspan="3">
                        Required Properties
                    </td>
                </tr>

                <tr>
                    <td><code>description</code></td>
                    <td><code>String</code></td>

                    <td>
                        <p>
                            <format style="bold">Required:</format> The command group's description, which must be a
                            string that explains what the group represents.
                            This string may not be longer than 100 characters.
                        </p>

                        <p>
                            Command group descriptions are not currently displayed in the Discord client, but the API
                            still requires that you provide them.
                            Discord has stated that they may be displayed someday, so it's a good idea to write
                            proper descriptions regardless.
                        </p>
                    </td>
                </tr>

                <tr id="command-group-properties-other:header:text:center">
                    <td colspan="3">
                        Other Properties
                    </td>
                </tr>

                <tr>
                    <td><code>parentCommand</code></td>
                    <td><code>SlashCommand?</code></td>

                    <td>
                        This group's parent slash command.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Command Context" id="command-context">
        <p>
            The <code>SlashCommandContext</code> type is extended by types that match the intended interaction response
            type, and these types are used as the receiver for the relevant slash command <code>action</code> blocks.
            This type provides relevant APIs on top of the
            <a href="Application-Commands.topic" anchor="contexts">base application command context object type</a>,
            allowing you to efficiently respond to command invocations.
        </p>

        <p>
            As mentioned in the
            <a href="Application-Commands.topic" anchor="contexts">base application command context documentation</a>,
            all slash command context types inherit the relevant
            <a href="Interactions.topic" anchor="interaction-contexts">interaction context type</a>.
        </p>

        <p>
            The following additional APIs are provided:
        </p>

        <chapter title="Properties" id="context-properties">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>arguments</code></td>
                    <td><code>T: Arguments</code></td>

                    <td>
                        <p>
                            The command's arguments, parsed into the
                            <a href="Commands.topic" anchor="arguments-classes">arguments class</a>
                            you specified the constructor for when you registered this command.
                        </p>

                        <p>
                            If you don't specify the aforementioned constructor, this will be an empty
                            <code>Arguments</code> object.
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>