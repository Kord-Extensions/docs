<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Modals" id="Modals">

    <show-structure depth="2"/>

    <p>
        The term "Modal" refers to a pop-up window within the Discord client.
        Modals contain a title and a number of <a href="Components.topic" />.
    </p>

    <table style="both">
        <tr>
            <td>Type</td>
            <td>Input</td>
            <td>Has ID</td>
        </tr>

        <tr>
            <td>Action Row</td>
            <td> </td>
            <td>‚ùå No</td>
        </tr>

        <tr>
            <td>Text Input (Line)</td>
            <td>Single Line</td>
            <td>‚úÖ Yes</td>
        </tr>

        <tr>
            <td>Text Input (Paragraph)</td>
            <td>Multiple Lines</td>
            <td>‚úÖ Yes</td>
        </tr>
    </table>

    <p>
        As the <code>ModalForm</code> type attempts to expose an API similar to the concept of UI forms;
        Modal components are referred to as Widgets, to be placed on a grid.
    </p>

    <p>
        As of this writing, this concept hasn't yet been fully explored.
        We plan to expand upon the concept later.
    </p>

    <chapter title="Limitations" id="limitations">
        <p>
            There are a number of limitations to keep in mind when working with Discord modals.
        </p>

        <list>
            <li>
                Discord
                <format style="bold">won't tell the bot when a user closes a Modal without submitting it.</format>
                The only way around this is to use a timeout, and assume that the Modal won't be submitted once it
                expires.
            </li>

            <li>
                As Modals use interactions,
                <format style="bold">they must be submitted within 15 minutes.</format>
                The interaction will fail if the user takes too long to submit a Modal.
            </li>

            <li>
                Modals have <format style="bold">a very limited number of compatible Widgets.</format>
                They used to support Select Menus, but this support was suddenly removed without explanation.
            </li>

            <li>
                Modals <format style="bold">may only be sent as the first response to an interaction.</format>
                This means they must be created and sent within 5 seconds, and they cannot be sent once the interaction
                has been deferred, edited, or responded to.
            </li>
        </list>
    </chapter>

    <chapter title="Modal Forms" id="modal-forms">
        <p>
            Kord Extensions represents Modals using the <code>ModalForm</code> type.
            This type provides a container for a Modal's Widgets, settings, and data.
            Similarly to <a href="Commands.topic" anchor="arguments-classes">command arguments classes</a>, you'll
            need to extend <code>ModalForm</code> when creating your Modals.
        </p>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
            class MyModal : ModalForm() {
                override var title: String = "Test Modal"

                val line = lineText {
                    label = "Line Text"
                    placeholder = "A single line of text"
                }

                val block = paragraphText {
                    label = "Paragraph Text"
                    placeholder = "A block of text which may span multiple lines"
                }
            }
        </code-block>

        <p>
            The <code>ModalForm</code> type exposes a number of APIs.
        </p>

        <chapter title="Widgets" id="modal-form-widgets">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>lineText</code></td>

                    <td>
                        Create a text input Widget which supports a single line of text.
                    </td>
                </tr>

                <tr>
                    <td><code>paragraphText</code></td>

                    <td>
                        Create a text input Widget which supports multiple lines of text.
                    </td>
                </tr>
            </table>

            <chapter title="Widget DSL API" id="modal-form-widgets-api">
                <chapter title="All Widgets" id="modal-form-widgets-api-all">
                    <p>
                        The following properties are available on all Widget types.
                    </p>

                    <table style="header-row">
                        <tr>
                            <td>Name</td>
                            <td>Type</td>
                            <td>Description</td>
                        </tr>

                        <tr>
                            <td><code>value</code></td>
                            <td><code>T: Any?</code></td>

                            <td>
                                The value provided by the user when the Modal is submitted.
                            </td>
                        </tr>
                    </table>
                </chapter>

                <chapter title="Text Widgets" id="modal-form-widgets-api-text">
                    <p>
                        The following properties are available on all text-based Widget types.
                    </p>

                    <table style="both">
                        <tr>
                            <td> </td>
                            <td>Name</td>
                            <td>Type</td>
                            <td>Description</td>
                        </tr>

                        <tr id="modal-form-widgets-api-text-required:div:bottom">
                            <td>üåê</td>
                            <td><code>label</code></td>
                            <td><code>String</code></td>

                            <td>
                                <format style="bold">Required:</format> A short, descriptive label that explains what
                                the user should enter into the Widget.
                            </td>
                        </tr>

                        <tr>
                            <td> </td>
                            <td><code>id</code></td>
                            <td><code>String</code></td>

                            <td>
                                The Widget's ID, used as the component ID on Discord.
                                Defaults to a randomly generated UUID.
                            </td>
                        </tr>

                        <tr>
                            <td>üåê</td>
                            <td><code>initialValue</code></td>
                            <td><code>String?</code></td>

                            <td>
                                An optional value to provide for this Widget.
                                This will show as a pre-filled value on Discord, for the user to edit.
                            </td>
                        </tr>

                        <tr>
                            <td> </td>
                            <td><code>maxLength</code></td>
                            <td><code>Int</code></td>

                            <td>
                                The maximum number of characters that a user may provide as a value.
                            </td>
                        </tr>

                        <tr>
                            <td> </td>
                            <td><code>minLength</code></td>
                            <td><code>Int</code></td>

                            <td>
                                The minimum number of characters that a user may provide as a value.
                            </td>
                        </tr>

                        <tr>
                            <td>üåê</td>
                            <td><code>placeholder</code></td>
                            <td><code>String?</code></td>

                            <td>
                                Optional placeholder text.
                                This will show as text within the component on Discord, in a lighter font, and will be
                                hidden when the user enters text into the component.
                            </td>
                        </tr>

                        <tr>
                            <td> </td>
                            <td><code>required</code></td>
                            <td><code>Boolean</code></td>

                            <td>
                                Whether the user must provide a value for this Widget to submit the Modal.
                                Defaults to <code>true</code>.
                            </td>
                        </tr>

                        <tr>
                            <td> </td>
                            <td><code>value</code></td>
                            <td><code>String?</code></td>

                            <td>
                                The value provided by the user when the Modal is submitted.
                                Will be <code>null</code> when no value was provided.
                            </td>
                        </tr>
                    </table>
                </chapter>
            </chapter>
        </chapter>

        <chapter title="Builders" id="modal-form-builders">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>sendAndAwait</code></td>

                    <td>
                        <p>
                            Convenience function to send the Modal to the current interaction, wait for its completion,
                            and call the provided <code>callback</code> block.
                        </p>

                        <p>
                            The callback block will receive a <code>ModalSubmitInteraction</code> as its first
                            parameter if the Modal was submitted on time, or <code>null</code> otherwise.
                        </p>

                        <p>
                            Several overrides are provided, which will fill the function's parameters using the given
                            <a href="Events.topic" anchor="event-context">event</a> or
                            <a href="Commands.topic" anchor="context-objects">command</a> context object.
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Functions" id="modal-form-functions">
            <table style="header-row">
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>sendAndDeferEphemeral</code></td>

                    <td>
                        Calls <code>sendAndAwait</code>, returning a deferred ephemeral interaction response if the
                        Modal was submitted on time, or <code>null</code> otherwise.
                    </td>
                </tr>

                <tr>
                    <td><code>sendAndDeferPublic</code></td>

                    <td>
                        Calls <code>sendAndAwait</code>, returning a deferred public interaction response if the
                        Modal was submitted on time, or <code>null</code> otherwise.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="modal-form-properties">
            <table style="both">
                <tr>
                    <td> </td>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td>üè∑Ô∏è</td>
                    <td><code>bundle</code></td>
                    <td><code>String?</code></td>

                    <td>
                        Override this to provide a <a href="Internationalisation.topic">translation bundle</a>
                        to use to translate this Modal's title and its Widgets'
                        labels, initial values, and placeholders.
                    </td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>id</code></td>
                    <td><code>String</code></td>

                    <td>
                        Modal ID,
                        used to associate the <code>ModalForm</code> with the corresponding interaction events.
                        This is a randomly generated UUID by default.
                    </td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>timeout</code></td>
                    <td><code>Duration</code></td>

                    <td>
                        How long to wait before assuming that the Modal was closed by the user.
                        Defaults to 15 minutes.
                    </td>
                </tr>

                <tr>
                    <td>üåê</td>
                    <td><code>title</code></td>
                    <td><code>String</code></td>

                    <td>
                        <format style="bold">Required:</format> Override this to set the Modal's title, which will be
                        shown in the Discord client.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Implementation Strategies" id="strategies">
        <p>
            There are several ways to support Modals in your bots.
            We've detailed the major approaches below.
        </p>

        <chapter title="Automatic" id="strategy-automatic">
            <p>
                The simplest way to add a Modal to your bot is to create a <code>ModalForm</code> as described above,
                and pass the constructor to your <a href="Application-Commands.topic">Application Command</a> or
                <a href="Components.topic">Component</a> builder functions.
            </p>

            <p>
                This causes a Modal to be sent as the first response to that command invocation or component
                interaction,
                with the filled-in <code>ModalForm</code> (or <code>null</code> if timed out) provided
                as an argument to the <code>action</code> block.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                publicButton(::MyModal) {
                    // Button configuration

                    action { modal ->
                        // Button body
                    }
                }
            </code-block>

            <p>
                For <a href="Slash-Commands.topic"/>,
                you may also combine this with an <code>Arguments</code> subtype.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                publicSlashCommand(::MyArguments, ::MyModal) {
                    // Command configuration

                    action { modal ->
                        // Command body
                    }
                }
            </code-block>
        </chapter>

        <chapter title="Semi-Automatic" id="strategy-semi-automatic">
            <p>
                Sometimes, the fully automatic approach isn't appropriate.
                For example, perhaps your Modal needs to be modified based on the arguments provided to the command,
                or needs to be pre-filled with data from your database.
            </p>

            <p>
                For these cases, you can instantiate your <code>ModalForm</code> subtype yourself, using the types
                provided by the <a href="Unsafe.topic">Unsafe Module</a> to delay the interaction response.
            </p>

            <p>
                This approach should be combined with the use of the <code>sendAndDefer</code> functions.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                unsafeSlashCommand {
                    // Command configuration

                    action {
                        val modal = MyModal()
                        val result = modal.sendAndDeferEphemeral(this)

                        if (result == null) {
                            // Modal timed out
                        } else {
                            // Modal was submitted, make use of it
                        }
                    }
                }
            </code-block>

            <p>
                This approach is also appropriate for relevant event handlers.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                event&lt;ButtonInteractionCreateEvent&gt; {
                    // Event handler configuration

                    action {
                        val modal = MyModal()
                        val result = modal.sendAndDeferEphemeral(this)

                        if (result == null) {
                            // Modal timed out
                        } else {
                            // Modal was submitted, make use of it
                        }
                    }
                }
            </code-block>
        </chapter>

        <chapter title="Manual" id="strategy-manual">
            <p>
                For greater control than either of the above approaches, you can also retain control over how your bot
                responds to the Modal submission interaction.
            </p>

            <p>
                You can do this by following the semi-automatic approach, replacing the <code>sendAndDefer</code>
                functions with <code>sendAndAwait</code>.
            </p>


            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                unsafeSlashCommand {
                    // Command configuration

                    action {
                        val modal = MyModal()

                        val result = modal.sendAndAwait(this) { interaction ->
                            // interaction will be `null` if the Modal timed out
                            interaction?.deferEphemeralResponse()
                        }

                        if (result == null) {
                            // Modal timed out
                        } else {
                            // Modal was submitted, make use of it
                        }
                    }
                }
            </code-block>
        </chapter>

        <chapter title="Without Forms" id="strategy-without-forms">
            <p>
                While there are very few situations where this is useful, it is possible to define and handle Modals
                without using Kord Extensions' abstractions.
                This is a relatively complex process in comparison, but it's still an approachable strategy.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                interaction.modal(&quot;title&quot;, &quot;modalId&quot;) {
                    actionRow {
                        textInput(
                            TextInputStyle.Short,
                            &quot;componentId&quot;,
                            &quot;label&quot;
                        ) {
                            allowedLength = 0 ... 1000
                            placeholder = &quot;Placeholder Text&quot;
                            required = true
                            value = &quot;Initial Value&quot;
                        }
                    }
                }

                // ...

                event&lt;ModalSubmitInteractionCreateEvent&gt; {
                    check {
                        failIfNot(event.interaction.modalId == "modalId")
                    }

                    action {
                        // Value is null if empty/missing/wrong ID
                        val value = event.interaction.textInputs["componentId"]?.value

                        // Event handler body
                    }
                }
            </code-block>
        </chapter>
    </chapter>
</topic>
