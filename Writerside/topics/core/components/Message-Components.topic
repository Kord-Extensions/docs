<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Message Components" id="Message-Components">

	<show-structure depth="2" />

	<p>
		Messages support a specific set of components.
	</p>

	<table style="both">
		<tr>
			<td>Type</td>
			<td>Actionable</td>
			<td>Has ID</td>
		</tr>

		<tr>
			<td>Action Row</td>
			<td>❌ No</td>
			<td>❌ No</td>
		</tr>

		<tr>
			<td>Button (Disabled)</td>
			<td>❌ No</td>
			<td>✅ Yes</td>
		</tr>

		<tr>
			<td>Button (Interaction)</td>
			<td>✅ Yes</td>
			<td>✅ Yes</td>
		</tr>

		<tr>
			<td>Button (Link)</td>
			<td>❌ No</td>
			<td>❌ No</td>
		</tr>

		<tr>
			<td>Select Menu</td>
			<td>✅ Yes</td>
			<td>✅ Yes</td>
		</tr>
	</table>

	<p>
		Kord Extensions provides a convenient API for shorter-lived message components.
		The <code>ComponentContainer</code> class is the core type representing this API.
	</p>

	<p>
		To get started, use the <code>components</code> builder.
		This builder is available for use in all message creation and editing builders.
	</p>

	<note>
		<p>
			Kord Extensions doesn't provide an atomic API for modifying your components after you've sent them to
			Discord.
			This is mostly due to technical limitations within Kotlin's type system, and it is unlikely this
			will change any time soon.
		</p>

		<p>
			If you wish to edit components, we suggest keeping a reference to the <code>ComponentContainer</code>
			returned by the <code>components</code> builder, and any relevant components that you create.
			The components within any given <code>ComponentContainer</code> may be applied to any message
			creation/editing builder via the <code>applyComponents</code> extension function.
		</p>
	</note>

	<code-block lang="kotlin" collapsible="true" collapsed-title="Example Usage">
		channel.createMessage {
			components {
				publicButton {
					label = "OK"
					style = ButtonStyle.Success

					action {
						respond {
							content = "Clicked: **OK**"
						}
					}
				}

				publicButton {
					label = "Cancel"
					style = ButtonStyle.Danger

					action {
						respond {
							content = "Clicked: **Cancel**"
						}
					}
				}
			}
		}
	</code-block>

	<chapter title="Components DSL" id="dsl">
		<p>
			The <code>components</code> DSL function accepts extra arguments:
		</p>

		<list>
			<li>
				<code>timeout</code>, an optional timeout <code>Duration</code>.
				This argument allows you to specify how long to wait (since the components were last interacted
				with) until the bot should stop waiting for interactions.
				Defaults to <code>null</code>, meaning the components will work until the bot restarts.
			</li>
		</list>

		<p>
			This function requires a callable block, a receiver on the <code>ComponentContainer</code> type.
			You should use this block to define the components to add to the message.
			The <code>ComponentContainer</code> will be returned by the function.
		</p>

		<p>
			The <code>ComponentContainer</code> class is <code>open</code>, and may be extended for advanced
			use-cases.
			If you need to create your own objects based on this class, you can use the <code>applyComponents</code>
			extension function available in all message creation/editing builders to apply its contents.
		</p>

		<chapter title="Adding Components" id="adding">
			<p>
				When adding components to messages directly, you need to define action rows for your components,
				and space them out yourself.
				The <code>ComponentContainer</code> still allows you to specify the rows your components belong to.
				However, for components with undefined rows, it will attempt to automatically pack them as tightly
				as possible, in the order they were defined.
				This automatic packing happens after your components are defined,
			</p>

			<p>
				For example, if you provide a select menu, six buttons and another select menu, then the container
				packs your components into rows that look like this:
			</p>

			<list type="decimal">
				<li>Select menu</li>
				<li>Five buttons</li>
				<li>One button</li>
				<li>Select menu</li>
				<li>Nothing</li>
			</list>

			<p>
				If needed, you can provide row numbers when you define your components.
				When you provide a row number, the container packs the component within the specified row
				<format style="bold">immediately</format>.
				If you combine this approach by also defining unsorted components (as mentioned above), the
				container packs the unsorted components
				<format style="bold">alongside those with defined rows</format>, attempting to fill the rows up as
				tightly as possible.
			</p>

			<p>
				For example, if you provide a select menu on row 2, six unsorted buttons, and another select menu
				on row 3, then the container packs your components into rows that look like this:
			</p>

			<list type="decimal">
				<li>Five buttons</li>
				<li>Select menu</li>
				<li>Select menu</li>
				<li>One button</li>
				<li>Nothing</li>
			</list>
		</chapter>

		<chapter title="DSL Functions" id="dsl-functions">
			<p>
				The following functions are available for component creation.
				We've split these by interaction type, just like the
				<a href="Application-Commands.topic">Application Command</a> DSL functions.
			</p>

			<p>
				All functions take the following arguments:
			</p>

			<list>
				<li>Optional: <a href="Modals.topic">ModalForm</a> class constructor</li>
				<li>Optional: Row number</li>
				<li>Component builder</li>
			</list>

			<table style="header-row">
				<tr>
					<td>Name</td>
					<td>Component</td>
				</tr>

				<tr>
					<td><code>disabledButton</code></td>
					<td>Button (Disabled)</td>
				</tr>

				<tr>
					<td><code>ephemeralButton</code></td>
					<td>Button (Interactive)</td>
				</tr>

				<tr>
					<td><code>linkButton</code></td>
					<td>Button (Link)</td>
				</tr>

				<tr>
					<td><code>publicButton</code></td>
					<td>Button (Interactive)</td>
				</tr>

				<tr id="components-dsl-select-menus:div:top">
					<td><code>ephemeralChannelSelectMenu</code></td>
					<td>Select Menu (Channel)</td>
				</tr>

				<tr>
					<td><code>ephemeralRoleSelectMenu</code></td>
					<td>Select Menu (Role)</td>
				</tr>

				<tr>
					<td><code>ephemeralStringSelectMenu</code></td>
					<td>Select Menu (String)</td>
				</tr>

				<tr>
					<td><code>ephemeralUserSelectMenu</code></td>
					<td>Select Menu (User)</td>
				</tr>

				<tr>
					<td><code>publicChannelSelectMenu</code></td>
					<td>Select Menu (Channel)</td>
				</tr>

				<tr>
					<td><code>publicRoleSelectMenu</code></td>
					<td>Select Menu (Role)</td>
				</tr>

				<tr>
					<td><code>publicStringSelectMenu</code></td>
					<td>Select Menu (String)</td>
				</tr>

				<tr>
					<td><code>publicUserSelectMenu</code></td>
					<td>Select Menu (User)</td>
				</tr>
			</table>
		</chapter>

		<chapter title="Component Builder API" id="builder-api">
			<p>
				The DSL functions above take a callable block as their last argument.
				This block provides a set of properties and functions that allow you to configure the component.
				Each DSL function also returns the configured component.
			</p>

			<chapter title="All Components" id="builder-api-generic">
				<p>
					The following APIs are available within all component builders.
				</p>

				<chapter title="Properties" id="builder-api-generic-properties">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Type</td>
							<td>Description</td>
						</tr>
					</table>
				</chapter>
			</chapter>

			<chapter title="Actionable Components" id="builder-api-actionable">
				<p>
					The following APIs are available within component builders for actionable components, as defined
					by the table at the top of this page.
				</p>

				<chapter title="Functions" id="builder-api-actionable-functions">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Description</td>
						</tr>

						<tr>
							<td><code>action</code></td>

							<td>
								Specify a block of code to run when a user interacts with this component.
								This is a receiver function against the corresponding context type for the component,
								with the first argument set to an instance of the <code>ModalForm</code> provided to
								the DSL function, if any.
							</td>
						</tr>

						<tr>
							<td><code>check</code></td>

							<td>
								Define a <a href="Checks.topic">Check</a> that must pass for the <code>action</code> to
								be run.
							</td>
						</tr>

						<tr>
							<td><code>requireBotPermissions</code></td>

							<td>
								If your bot requires any permissions to be able to execute the <code>action</code>, use
								this function to register those permissions.
								If the component is interacted with while the bot doesn’t have the specified
								permissions, an error will be sent to the user, explaining which permissions the bot is
								missing.
							</td>
						</tr>
					</table>
				</chapter>

				<chapter title="Properties" id="builder-api-actionable-properties">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Type</td>
							<td>Description</td>
						</tr>

						<tr>
							<td><code>deferredAck</code></td>
							<td><code>Boolean</code></td>

							<td>
								Whether to respond with a deferred acknowledgement, which will hide the "Thinking..."
								message when a user interacts with the component.
								Defaults to <code>true</code>.
							</td>
						</tr>

						<tr>
							<td><code>locking</code></td>
							<td><code>Boolean</code></td>

							<td>
								Whether to use a
								<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/">
									Mutex
								</a> to prevent this component's action from being run concurrently with itself.

								Defaults to <code>false</code>, allowing the component's action to run multiple
								times concurrently.
							</td>
						</tr>
					</table>
				</chapter>
			</chapter>

			<chapter title="Components with IDs" id="builder-api-id">
				<p>
					The following APIs are available within component builders for components with IDs, as defined
					by the table at the top of this page.
				</p>

				<chapter title="Properties" id="builder-api-id-properties">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Type</td>
							<td>Description</td>
						</tr>

						<tr>
							<td><code>id</code></td>
							<td><code>String</code></td>

							<td>
								A unique identifier for this component.
								Kord Extensions uses this ID to figure out what code to execute when a user interacts
								with a components.
								Defaults to a randomly generated UUID.
							</td>
						</tr>
					</table>
				</chapter>
			</chapter>

			<chapter title="Buttons" id="builder-api-buttons">
				<p>
					The following APIs are available within component builders for all types of buttons.
				</p>

				<chapter title="Properties" id="builder-api-buttons-properties">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Type</td>
							<td>Description</td>
						</tr>

						<tr>
							<td><code>label</code></td>
							<td><code>Key</code></td>

							<td>
								<p>
									<a href="Internationalization.topic" anchor="using-translations-translating-keys">
										Key object
									</a> representing the button's label, for display on discord.
									You must provide either this or <code>partialEmoji</code>, or both.
								</p>

								<p>
									<format style="bold">Note:</format> Locales will not be automatically added to the
									Key object.
									Remember to use <code>.withLocale(locale)</code> when passing a Key object to this
									property.
								</p>
							</td>
						</tr>

						<tr>
							<td><code>partialEmoji</code></td>
							<td><code>DiscordPartialEmoji</code></td>

							<td>
								The button's emoji, for display on discord.
								You must provide either this or <code>label</code>, or both.
							</td>
						</tr>
					</table>
				</chapter>

				<chapter title="Actionable Buttons" id="builder-api-buttons-actionable">
					<p>
						Besides the APIs available to <a anchor="builder-api-actionable">actionable components</a>,
						the following APIs are available to actionable button types.
					</p>

					<chapter title="Functions" id="builder-api-buttons-actionable-functions">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>disable</code></td>

								<td>
									Disable this button.
								</td>
							</tr>

							<tr>
								<td><code>enable</code></td>

								<td>
									Enable this button.
								</td>
							</tr>
						</table>
					</chapter>

					<chapter title="Properties" id="builder-api-buttons-actionable-properties">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Type</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>disabled</code></td>
								<td><code>Boolean</code></td>

								<td>
									Whether this button should render as disabled, and be impossible to interact with.
									Defaults to <code>false</code>.
								</td>
							</tr>
						</table>
					</chapter>
				</chapter>

				<chapter title="Disabled Buttons" id="builder-api-buttons-disabled">
					<p>
						Besides the APIs available to <a anchor="builder-api-id">components with IDs</a>,
						the following APIs are available to disabled buttons.
					</p>

					<chapter title="Properties" id="builder-api-buttons-disabled-properties">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Type</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>style</code></td>
								<td><code>ButtonStyle</code></td>

								<td>
									Button style, used to render the button on Discord.
									Defaults to <code>Primary</code>.
								</td>
							</tr>
						</table>
					</chapter>
				</chapter>

				<chapter title="Interaction Buttons" id="builder-api-buttons-interaction">
					<p>
						Besides the APIs available to <a anchor="builder-api-id">components with IDs</a> and
						<a anchor="builder-api-actionable">actionable components</a>, the following APIs are available
						to interaction buttons.
					</p>

					<chapter title="Functions" id="builder-api-buttons-interaction-functions">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>initialResponse</code></td>

								<td>
									Static callable representing the initial response to provide to Discord.
									If you don't call this, Kord Extensions will acknowledge the interaction without
									a message.
								</td>
							</tr>
						</table>
					</chapter>

					<chapter title="Properties" id="builder-api-buttons-interaction-properties">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Type</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>style</code></td>
								<td><code>ButtonStyle</code></td>

								<td>
									Button style, used to render the button on Discord.
									Defaults to <code>Primary</code>.
								</td>
							</tr>
						</table>
					</chapter>
				</chapter>

				<chapter title="Link Buttons" id="builder-api-buttons-link">
					<p>
						The following APIs are available to link buttons.
					</p>

					<chapter title="Properties" id="builder-api-buttons-link-properties">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Type</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>url</code></td>
								<td><code>String</code></td>

								<td>
									URL to send the user to when they interact with the button.
								</td>
							</tr>
						</table>
					</chapter>
				</chapter>
			</chapter>

			<chapter title="Select Menus" id="builder-api-select-menus">
				<p>
					Besides the APIs available to <a anchor="builder-api-actionable">actionable components</a>, the
					following APIs are available to all types of select menu.
				</p>

				<chapter title="Functions" id="builder-api-select-menus-functions">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Description</td>
						</tr>

						<tr>
							<td><code>disable</code></td>

							<td>
								Disable this select menu.
							</td>
						</tr>

						<tr>
							<td><code>enable</code></td>

							<td>
								Enable this select menu.
							</td>
						</tr>
					</table>
				</chapter>

				<chapter title="Properties" id="builder-api-select-menus-properties">
					<table style="header-row">
						<tr>
							<td>Name</td>
							<td>Type</td>
							<td>Description</td>
						</tr>

						<tr>
							<td><code>disabled</code></td>
							<td><code>Boolean</code></td>

							<td>
								Whether this select menu should render as disabled, and be impossible to interact with.
								Defaults to <code>false</code>.
							</td>
						</tr>

						<tr>
							<td><code>maximumChoices</code></td>
							<td><code>Int?</code></td>

							<td>
								The maximum number of options a user can pick.
								Provide <code>null</code> to remove the limit.
								Defaults to <code>1</code>.
							</td>
						</tr>

						<tr>
							<td><code>minimumChoices</code></td>
							<td><code>Int</code></td>

							<td>
								The minimum number of options a user can pick.
								Must be at least <code>1</code>.
								Defaults to <code>1</code>.
							</td>
						</tr>

						<tr>
							<td><code>placeholder</code></td>
							<td><code>Key?</code></td>

							<td>
								<p>
									<a href="Internationalization.topic" anchor="using-translations-translating-keys">
										Key object
									</a> representing the placeholder text to show before the user has selected any
									options.
									Defaults to <code>null</code>.
								</p>

								<p>
									<format style="bold">Note:</format> Locales will not be automatically added to the
									Key object.
									Remember to use <code>.withLocale(locale)</code> when passing a Key object to this
									property.
								</p>
							</td>
						</tr>
					</table>
				</chapter>

				<chapter title="Channel Menus" id="builder-api-select-menus-channel">
					<p>
						The following APIs are available to channel select menus.
					</p>

					<chapter title="Functions" id="builder-api-select-menus-channel-functions">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>channelType</code></td>

								<td>
									Add the given channel type to the list of allowed channel types for this menu.
								</td>
							</tr>
						</table>
					</chapter>

					<chapter title="Properties" id="builder-api-select-menus-channel-properties">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Type</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>channelTypes</code></td>
								<td><code>MutableList&lt;ChannelType&gt;</code></td>

								<td>
									List of allowed channel types for this menu.
									Mutated by the <code>channelType</code> function.
								</td>
							</tr>
						</table>
					</chapter>
				</chapter>

				<chapter title="String Menus" id="builder-api-select-menus-string">
					<p>
						The following APIs are available to string select menus.
					</p>

					<chapter title="Functions" id="builder-api-select-menus-string-functions">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>option</code></td>

								<td>
									Add an option to the list of potential options for this menu.
									This is optionally a builder function, used to configure the option's
									description, emoji, and default selection state.
								</td>
							</tr>
						</table>
					</chapter>

					<chapter title="Properties" id="builder-api-select-menus-string-properties">
						<table style="header-row">
							<tr>
								<td>Name</td>
								<td>Type</td>
								<td>Description</td>
							</tr>

							<tr>
								<td><code>options</code></td>
								<td><code>MutableList&lt;SelectOptionBuilder&gt;</code></td>

								<td>
									List of potential options for this menu.
									Add options using the <code>option</code> function.
								</td>
							</tr>
						</table>
					</chapter>
				</chapter>
			</chapter>
		</chapter>

		<chapter title="Component Container API" id="container-api">
			<p>
				The <code>ComponentContainer</code> type exposes several useful APIs.
				The <code>components</code> DSL function is a receiver for an object of this type, and it also
				returns that object.
			</p>

			<chapter title="Functions" id="component-container-api-functions">
				<table style="header-row">
					<tr>
						<td>Name</td>
						<td>Description</td>
					</tr>

					<tr>
						<td><code>add</code></td>

						<td>
							Manually add a component to this container.
						</td>
					</tr>

					<tr>
						<td><code>cancel</code></td>

						<td>
							Cancel the timeout task, and remove all components from this container.
							This is equivalent to timing out the container early, but it will not run the
							callback defined via the <code>onTimeout</code> function.
							<format style="bold">Note:</format> This will not update the components in any related
							messages — you'll need to edit them to clear their components manually.
						</td>
					</tr>

					<tr>
						<td><code>onTimeout</code></td>

						<td>
							Register the callback to be run when the container times out.
							<format style="bold">Note:</format> The <code>cancel</code> function won't run this
							callback.
						</td>
					</tr>

					<tr>
						<td><code>remove</code></td>

						<td>
							Remove the given component from the container, and prevent it from being used.
							<format style="bold">Note:</format> This will not update the components in any related
							messages — use the <code>applyToMessage</code> function to do so.
						</td>
					</tr>

					<tr>
						<td><code>removeAll</code></td>

						<td>
							Remove all components from the container, and prevent them from being used.
							<format style="bold">Note:</format> This will not update the components in any related
							messages — use the <code>applyToMessage</code> function to do so.
						</td>
					</tr>

					<tr>
						<td><code>replace</code></td>

						<td>
							Replace a component within this container with another.
							<format style="bold">Note:</format> This will not update the components in any related
							messages — use the <code>applyToMessage</code> function to do so.
						</td>
					</tr>

					<tr>
						<td><code>sort</code></td>

						<td>
							Pack any unsorted components into rows.
							<format style="bold">Note:</format> You generally won't need to call this function
							yourself.
						</td>
					</tr>
				</table>

				<table style="header-row">
					<tr>
						<td>Receiver</td>
						<td>Name</td>
						<td>Description</td>
					</tr>

					<tr>
						<td><code>MessageBuilder</code></td>
						<td><code>applyToMessage</code></td>

						<td>
							Apply the components within this container to the given message builder.
						</td>
					</tr>
				</table>
			</chapter>

			<chapter title="Properties" id="component-container-api-properties">
				<table style="header-row">
					<tr>
						<td>Name</td>
						<td>Type</td>
						<td>Description</td>
					</tr>

					<tr>
						<td><code>rows</code></td>
						<td><code>Array&lt; MutableList&lt;Component&gt; &gt;</code></td>

						<td>
							An array representing sorted rows of components.
							The <code>sort</code> function fills this.
						</td>
					</tr>

					<tr>
						<td><code>timeout</code></td>
						<td><code>Duration?</code></td>

						<td>
							If defined, the container will remove and unregister its components once it reaches the
							timeout, unless component interactions have happened.
							When interactions happen, the timeout resets.
						</td>
					</tr>

					<tr>
						<td><code>timeoutCallback</code></td>
						<td><code>ComponentContainer.() -> Unit</code></td>

						<td>
							A callback run when the timeout expires.
							Defined by the <code>onTimeout</code> function.
						</td>
					</tr>

					<tr>
						<td><code>timeoutTask</code></td>
						<td><code>Task?</code></td>

						<td>
							The scheduled timeout task, if a timeout exists.
						</td>
					</tr>

					<tr>
						<td><code>unsortedComponents</code></td>
						<td><code>MutableList&lt;Component&gt;</code></td>

						<td>
							A list containing unsorted components, to be sorted by the <code>sort</code> function.
						</td>
					</tr>
				</table>
			</chapter>
		</chapter>
	</chapter>

	<chapter title="Handling Components Manually" id="manual">
		<p>
			For longer-lived message components, including those that must work after the bot restarts, it may be
			better to create your components manually, and write your own <a href="Events.topic">Event Handlers</a>.
		</p>

		<chapter title="Defining Components" id="manual-components">
			<p>
				You can define components using Kord's built-in APIs in any message creation/editing builder.
				You'll need to define the action rows first, and then place components within them.
			</p>

			<note>
				<p>
					If your extension creates multiple long-lived components, you should think about the IDs you use
					for them.
				</p>

				<p>
					Since you can parse the component ID when you receive an interaction event, it is a good idea to
					use a system of prefixed IDs containing additional contextual information.
					However, it is important to remember that your component IDs mustn’t clash with the components
					defined in other extensions.
				</p>

				<p>
					Component IDs may be up to 100 characters long.
				</p>
			</note>

			<code-block lang="kotlin" collapsible="true" collapsed-title="Example">
				actionRow {
					interactionButton(ButtonStyle.Success, "roles/add") {
						label = "Add"
					}

					interactionButton(ButtonStyle.Danger, "roles/remove") {
						label = "Remove"
					}
				}
			</code-block>

			<p>
				You may use the following functions to define components:
			</p>

			<table style="header-row">
				<tr>
					<td>Name</td>
					<td>Description</td>
				</tr>

				<tr>
					<td><code>channelSelect</code></td>

					<td>
						Create a channel select menu.
					</td>
				</tr>

				<tr>
					<td><code>interactionButton</code></td>

					<td>
						<p>
							Create an interaction button.
							You may create a disabled button by setting <code>disabled</code> to <code>true</code> in
							the builder.
						</p>

						<warning>
							Providing a style of <code>Link</code> will result in an error.
							For link buttons, use <code>linkButton</code> instead.
						</warning>
					</td>
				</tr>

				<tr>
					<td><code>linkButton</code></td>

					<td>
						Create a link button.
					</td>
				</tr>

				<tr>
					<td><code>mentionableSelect</code></td>

					<td>
						Create a select menu for all mentionable entity types.
					</td>
				</tr>

				<tr>
					<td><code>roleSelect</code></td>

					<td>
						Create a role select menu.
					</td>
				</tr>

				<tr>
					<td><code>stringSelect</code></td>

					<td>
						Create a string select menu.
					</td>
				</tr>

				<tr>
					<td><code>userSelect</code></td>

					<td>
						Create a user select menu.
					</td>
				</tr>
			</table>

			<p>
				For more information, see
				<a href="https://dokka.kord.dev/rest/dev.kord.rest.builder.component/-action-row-builder/index.html">
					the Kord docs</a>.
			</p>
		</chapter>

		<chapter title="Defining Event Handlers" id="manual-event-handlers">
			<p>
				Once you've created your components, you'll need to create some event handlers.
				Kord provides several event types that are suitable for this:
			</p>

			<list>
				<li>
					<code>ComponentInteractionCreateEvent</code>, fired when a user interacts with any of this bot's
					components.
				</li>

				<li>
					<code>ButtonInteractionCreateEvent</code>, fired when a user interacts with any of this bot's
					buttons.
				</li>

				<li>
					<code>SelectMenuInteractionCreateEvent</code>, fired when a user interacts with any of this bot's
					select menus.
				</li>
			</list>

			<p>
				These events also come in global and guild variants.
			</p>

			<code-block lang="kotlin" collapsible="true" collapsed-title="Example">
				val matchRegex = "role/\\w+".toRegex()

				event&lt;GuildButtonInteractionCreateEvent&gt; {
					check {
						failIf(!matchRegex.matches(event.interaction.componentId))
					}

					action {
						val action = matchRegex
							.matchEntire(event.interaction.componentId)!!
							.groupValues[1]

						when (action) {
							"add" -> {
								// Add the role
							}

							"remove" -> {
								// Remove the role
							}

							else -> event.interaction.respondEphemeral {
								content = "Unknown action: $action"
							}
						}
					}
				}
			</code-block>

			<p>
				For more information, see
				<a href="https://dokka.kord.dev/core/dev.kord.core.event.interaction/-component-interaction-create-event/index.html">
					the Kord docs</a>.
			</p>
		</chapter>
	</chapter>
</topic>
