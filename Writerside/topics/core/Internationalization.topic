<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Internationalization (i18n)" id="Internationalization">

    <show-structure depth="2"/>
	<primary-label ref="v2.3.0"/>

    <p>
        While some smaller bots are only designed with one language in mind, many larger bots will need to support
        guilds and users using a variety of languages and locales.
    </p>

    <p>
        To help with this, Kord Extensions was designed with internationalization (i18n) in mind, and it provides
		many relevant tools and systems.
    </p>

    <chapter title="Planning" id="planning">
        <p>
            Before you can begin to localize your bots, you'll need to do some planning:
        </p>

        <list type="decimal">
            <li>
                <p>
                    Decide on a default locale.
                </p>

                <p>
                    This will be US English for most bots,
                    but you're free to use something else if there's a more suitable locale.
                </p>
            </li>

            <li>
                <p>
                    Consider the depth of your localization work.
                </p>

                <p>
                    Making bots suitable for use in other locales requires extra consideration.
                    Different languages and locales require very different approaches, and it's important to consider
                    what may change between them.
                    For example:
                </p>

                <list type="bullet">
                    <li>
                        Number formats, including things such as currencies, and dates and times.
                    </li>

                    <li>
                        Units, such as those used for weights, volumes and temperatures.
                    </li>

                    <li>
                        Text direction for right-to-left languages.
                    </li>
                </list>

                <p>
                    This isn't an exhaustive list — it's important to do research and chat with folks that speak your
                    bot's target locales.
                </p>
            </li>

            <li>
                <p>
                    Consider what external tooling you'll need.
                </p>

                <p>
                    Automatic translation tools like DeepL and Google Translate can be useful in a small number of
                    situations,
                    but their output is usually inaccurate or otherwise unsuitable for use in your translations.
                </p>

                <p>
                    Instead, consider crowdsourcing translations using tools like
					<a href="https://weblate.org/en/">Weblate</a> and
					<a href="https://crowdin.com/">Crowdin</a> — and get your community involved!
                    There are many tools that support Java Properties files and the ICU Message Format, and lots of them
                    can integrate with your version control system.
					We recommend shopping around and finding something that suits your project and community.
                </p>
            </li>
        </list>

        <p>
            Localizing a bot is often a pretty large undertaking, but it can be very worthwhile!
        </p>
    </chapter>

    <chapter title="Basic Concepts" id="basic-concepts">
        <p>
            Kord Extensions approaches i18n in a rather specific way, so it's important to understand a few things.
        </p>

        <chapter title="Locales" id="basic-concepts-locales">
            <p>
                Locales represent specific geographical, political, or cultural regions.
                In the context of programming, <code>Locale</code> objects are used to represent a set of language,
                script, region, variant, and extensions, which can be used together to format all kinds of data or
                to look up translations.
            </p>

            <p>
                Discord has a predefined set of supported locales,
                which may be found <a href="https://discord.com/developers/docs/reference#locales">here</a>.
                This list of locales represents those supported by the Discord client and isn't an exhaustive list
                of all possible locales.
            </p>

            <p>
                Kord Extensions uses locale resolvers to find the relevant <code>Locale</code> object for any given
                event.
                You can configure them in
                <a href="Config-Internationalization.topic">your bot's i18n builder</a>.
            </p>

			<p>
				You may want to consider writing a custom resolver and allowing users to configure their preferred
				locale using commands if you want to support locales other than those in the Discord client.
			</p>
        </chapter>

        <chapter title="Translation Bundles" id="basic-concepts-bundles">
			<warning>
				<format style="bold">Translation bundles are UTF-8!</format>

				<p>
					Prior to Java 9, properties files were assumed to be written using the <code>ISO-8859-1</code>
					encoding.
					For this reason, some editors may assume that all properties files are encoded using
					<code>ISO-8859-1</code>, and you'll need to reconfigure them.
					We recommend using <a href="https://editorconfig.org/">Editorconfig</a> for this, which JetBrains
					tools have first-party support for.
				</p>

				<p>
					Kord Extensions assumes all translation bundles use properties files encoded using
					<code>UTF-8</code>. You will run into problems if you use any other encoding!
				</p>
			</warning>

            <p>
                The most important unit in the i18n system is the translation bundle.
                By default, Kord Extensions uses properties-based Java Resource Bundles, where translations are stored
                in a set of <code>.properties</code> files with similarly prefixed names.
                Translation bundles are represented using <code>Bundle</code> objects in code.
            </p>

            <p>
                The first thing you'll need to do is pick a name for your translation bundle.
                The name should contain two parts — the name of the containing folder, and the bundle itself — split
                using a dot or period (<code>.</code>).
                This name is used to locate the resource bundle in your bot's resources, within the
                <path>translations/</path> base directory.
            </p>

            <p>
                For example, <code>mybot.strings</code> refers to a resource bundle named <code>strings</code> stored
                within <path>translations/mybot/</path> in your bot's resource files.
            </p>

            <p>
                Your translation bundle must contain a base translation file, with a set of default translations.
                This file should be named without a locale, so in the above example, it'd be named
                <code>strings.properties</code>.
                The translations in this file will be used as a fallback when a translation is missing.
            </p>

            <p>
                All other translations must be placed in translation files containing the relevant locale code.
                For example, the locale code for German is <code>de</code>, so a translation file for German in our
                example would be named <code>strings_de.properties</code>.
            </p>

            <p>
                For more information on the properties file format,
                <a href="https://en.wikipedia.org/wiki/.properties#Format">see this page on Wikipedia</a>.
            </p>
        </chapter>

        <chapter title="Translation Keys" id="basic-concepts-keys">
            <p>
                A translation key represents a single translation.
                When you store translations in a properties file, they're referred to by name.
                For example:
            </p>

            <code-block lang="ini">
                command.about.name=about
                command.about.description=Learn about this bot.
            </code-block>

            <p>
                In the above properties file, <code>command.about.name</code> is a translation key, referring to a
                specific translation.
            </p>

            <p>
                Translation keys are represented using <code>Key</code> objects in code.
                These objects may also contain bundle and locale information with predefined replacement values, as
                explained in below.
            </p>
        </chapter>
    </chapter>

	<chapter title="Writing Translations" id="writing-translations">
		<p>
			To quickly recap the previous section: Translations are (by default) written to UTF-8-encoded
			<code>.properties</code> files, grouped together into a translation bundle.
			These translations are referred to using a combination of the bundle name and translation key.
		</p>

		<p>
			Translations are written using
			<a href="https://unicode-org.github.io/icu/userguide/format_parse/messages/">ICU Message Format</a>, a
			standard message formatter provided by the Unicode Consortium.
			This format provides a few useful (but understated) tools that you can use to write better contextual
			translations.
		</p>

		<chapter title="Placeholder Substitution" id="writing-translations-placeholders">
			<p>
				ICU Message Format allowed for two types of placeholders:
			</p>

			<list type="bullet">
				<li>
					<p>
						<format style="bold">Ordinal placeholders:</format> <code>Hello, {0}!</code>
					</p>

					<p>
						Ordinal placeholders are filled using an array of arbitrary values.
						Array indices are specified by placing them within curly braces.
					</p>

					<p>
						For example, to specify the first element of the array, you would use <code>{0}</code>.
					</p>
				</li>

				<li>
					<p>
						<format style="bold">Named placeholders:</format> <code>Hello, {name}!</code>
					</p>

					<p>
						Named placeholders are filled using a string-keyed map of arbitrary values.
						The map's keys are specified by placing them within curly braces.
					</p>

					<p>
						For example, to specify the <code>name</code> key of the map, you would use <code>{name}</code>.
					</p>
				</li>
			</list>

			<p>
				Mixed placeholder types are unsupported, so you'll need to pick one or the other.
				<format style="bold">We recommend using named placeholders,</format> as they result in more readable
				translations.
			</p>

			<p>
				Placeholders are automatically formatted using the default ICU formatter for the corresponding type.
				However, you can further format placeholders by supplying a style modifier.
			</p>
		</chapter>

		<chapter title="Numeric Formatting" id="writing-translations-numeric">
			<p>
				ICU Message Format provides several useful modifiers you can use to format numeric types.
				The following examples use <code>0</code> in place of any ordinal or named placeholder you may use.
			</p>

			<chapter title="Numbers" id="writing-translations-numeric-numbers">
				<list type="bullet">
					<li><format style="bold">Automatic:</format> <code>{0, number}</code> (12.5)</li>
					<li><format style="bold">Integer:</format> <code>{0, number, integer}</code> (13)</li>
					<li><format style="bold">Currency:</format> <code>{0, number, currency}</code> ($12.50)</li>
					<li><format style="bold">Percent:</format> <code>{0, number, percent}</code> (1,250%)</li>

					<li>
						<format style="bold">Custom:</format> <code>{0, number, ###,###.###}</code> (uses
						<a href="https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html">
							Java's DecimalFormat</a>)
					</li>
				</list>
			</chapter>

			<chapter title="Dates" id="writing-translations-numeric-dates">
				<list type="bullet">
					<li><format style="bold">Automatic:</format> <code>{0, date}</code> (Sep 22, 2024)</li>
					<li><format style="bold">Short:</format> <code>{0, date, short}</code> (9/22/24)</li>
					<li><format style="bold">Medium:</format> <code>{0, date, medium}</code> (Sep 22, 2024)</li>
					<li><format style="bold">Long:</format> <code>{0, date, long}</code> (September 22, 2024)</li>

					<li>
						<format style="bold">Full:</format> <code>{0, date, full}</code> (Sunday, September 22, 2024)
					</li>

					<li>
						<format style="bold">Custom:</format> <code>{0, date, dd/MM/yyyy}</code> (uses
						<a href="https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html">
							Java's SimpleDateFormat</a>)
					</li>
				</list>
			</chapter>

			<chapter title="Times" id="writing-translations-numeric-times">
				<list type="bullet">
					<li><format style="bold">Automatic:</format> <code>{0, time}</code> (4:30:00 PM)</li>
					<li><format style="bold">Short:</format> <code>{0, time, short}</code> (4:30 PM)</li>
					<li><format style="bold">Medium:</format> <code>{0, time, medium}</code> (4:30:00 PM)</li>
					<li><format style="bold">Long:</format> <code>{0, time, long}</code> (4:30:00 PM GMT+1)</li>
					<li><format style="bold">Full:</format> <code>{0, time, full}</code> (4:30:00 PM GMT+1)</li>

					<li>
						<format style="bold">Custom:</format> <code>{0, time, kk:mm:ss}</code> (uses
						<a href="https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html">
							Java's SimpleDateFormat</a>)
					</li>
				</list>
			</chapter>

			<chapter title="Others" id="writing-translations-numeric-others">
				<p>
					<format style="bold">Durations:</format> <code>{0, duration}</code> - for formatting numbers
					(representing seconds) as simple durations.
					For example, <code>123</code> becomes <code>02:03</code> in English.
				</p>

				<p>
					<format style="bold">Ordinals:</format> <code>{0, ordinal}</code> - for formatting numbers
					with ordinal suffixes.
					For example, <code>3</code> becomes <code>3rd</code> in English.
				</p>

				<p>
					<format style="bold">Spellouts:</format> <code>{0, spellout}</code> - for formatting numbers
					as text.
					For example, <code>100</code> becomes <code>one hundred</code> in English.
				</p>

				<p>
					For more advanced number formatting, see
					<a href="https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/RuleBasedNumberFormat.html">
						RuleBasedNumberFormat
					</a>.
				</p>
			</chapter>
		</chapter>

		<chapter title="Selections" id="writing-translations-selections">
			<p>
				Selections are a more advanced formatting construct that allows you to provide different translations
				based on a set of rules.
				The following examples use <code>0</code> in place of any ordinal or named placeholder you may use.
			</p>

			<chapter title="Keyword Selections" id="writing-translations-selections-keywords">
				<p>
					Keyword selections allow you to provide a different translation based on the contents of a
					placeholder.
					This is done by configuring the <code>select</code> modifier with matching patterns.
				</p>

				<p>
					A matching pattern uses the form of <code>keyword {translation}</code>, and you may provide multiple
					patterns separated by spaces.
					The <code>other</code> pattern is used when no other keywords match the placeholder, and it must
					always be included in your keyword selection.
				</p>

				<p>
					Translations may themselves contain placeholders, selectors, and other patterns.
				</p>

				<p>
					For example, to pick a pronoun based on the given gender, you could do something like this:
				</p>

				<code-block>
					{0, select, male {he} female {she} doll {it} other {they}}
				</code-block>
			</chapter>

			<chapter title="Plural Selections" id="writing-translations-selections-plural">
				<p>
					Plural selections allow you to provide a separate translation based on the value of a numeric
					placeholder.
					This is done by configuring the <code>plural</code> modifier with various options and some matching
					patterns.
				</p>

				<p>
					Plural selections support a number of options, provided using the form <code>name:value</code>
					before the matching patterns:
				</p>

				<list type="bullet">
					<li>
						<code>offset</code> - By providing a number, it will be subtracted from the placeholder's value
						before being used to match the given cases.
					</li>
				</list>

				<p>
					A matching pattern uses the form of <code>case {translation}</code>, and you may provide multiple
					patterns separated by spaces.
					The <code>other</code> case is used if no other keywords match the placeholder, and it must always
					be included in your keyword selection.
					The following default cases are supported:
				</p>

				<list type="bullet">
					<li><code>zero</code> - Matched when the value is 0.</li>
					<li><code>one</code> - Matched when the value is 1.</li>
					<li><code>two</code> - Matched when the value is 2.</li>
					<li><code>few</code> - Matched when you'd normally say "a few" to represent the value.</li>
					<li><code>many</code> - Matched when you'd normally say "many" to represent the value.</li>
				</list>

				<p>
					You can also match a specific value by prefixing it with <code>=</code>.
					For example, to match a value of 7, you could use <code>=7</code>.
				</p>

				<p>
					Translations may themselves contain placeholders, selectors, and other patterns.
					Additionally, providing a <code>#</code> in the translation will insert the value of the
					placeholder.
				</p>

				<p>
					As an example, if you were hosting a party, you might do something like this:
				</p>

				<code-block>
					{guests, plural, offset:1
						zero {{host} does not throw a party.}
						one {{host} invites {guest} to the party.}
						two {{host} invites {guest} and one other person to the party.}
						other {{host} invites {guest} and # other people to the party.}
					}
				</code-block>
			</chapter>
		</chapter>
	</chapter>

	<chapter title="Using Translations" id="using-translations">
		<p>
			At its most basic, the translations system only requires you to provide a <code>Key</code> object to a
			translatable property.
			The <code>Key</code> objects are instances of an immutable data class, which can contain the following
			information:
		</p>

		<list type="bullet">
			<li>A <code>String</code> representing a translation key in a bundle.</li>
			<li>A <code>Bundle</code> representing the corresponding translation bundle</li>
			<li>A <code>Locale</code> representing the locale to translate this <code>Key</code> to.</li>
			<li>A pre-defined array of ordinal placeholders or map of named placeholders.</li>

			<li>
				A setting (<code>presetPlaceholderPosition</code>) which defines whether to place pre-defined ordinal
				placeholders before or after the placeholders provided to a <code>translate</code> call.
			</li>

			<li>
				<p>
					A setting (<code>translateNestedKeys</code>) which defines whether nested <code>Key</code> objects
					in translation placeholders should also be translated before use.
				</p>

				<p>
					<format style="bold">Note:</format> This only supports a single level of nesting.
				</p>
			</li>
		</list>

		<chapter title="Creating Keys" id="using-translations-creating-keys">
			<p>
				If you're using <a href="KordEx-Plugin.topic">the KordEx Gradle plugin</a>, you can
				<a href="KordEx-Plugin.topic" anchor="settings-i18n">configure it to generate translation classes</a>
				from your translation bundle.
			</p>

			<p>
				This is the recommended approach and will result in a tree of translation classes containing generated
				<code>Key</code> objects that you can reference in your code.
				If you can't use the Gradle plugin, you can find a CLI tool and an API
				<a href="https://github.com/Kord-Extensions/i18n">in this GitHub repository</a>, to integrate with your
				own tooling.
			</p>

			<p>
				Alternatively, <code>Key</code> objects can be manually constructed as required, or created from
				<code>String</code> keys using the
				<code>String.toKey(bundle?, locale?, presetPlaceholderPosition?, translateNestedKeys?)</code>
				extension function.
			</p>
		</chapter>

		<chapter title="Configuring Keys" id="using-translations-configuring-keys">
			<p>
				<code>Key</code> objects are immutable, but they provide several functions that allow you to configure
				cloned objects.
			</p>

			<p>
				To create a copy of the <code>Key</code> with a bundle or locale, you can use the
				<code>withBundle</code>, <code>withLocale</code> or <code>withBoth</code> functions, or with the
				<code>withContext</code> function to copy the locale from a command context.
				Creating a copy without either a bundle or locale can be done by calling the corresponding
				<code>without</code> functions.
			</p>

			<p>
				To create a copy with more pre-defined placeholders, use the <code>withOrdinalPlaceholders</code>
				or <code>withNamedPlaceholders</code> functions.
				You can create a copy without pre-defined placeholders by calling the corresponding <code>without</code>
				functions, or create a copy with a set of filtered placeholders using the corresponding
				<code>filter</code> functions.
			</p>

			<p>
				To create a copy with updated settings, use the <code>withPresetPlaceholderPosition</code> or
				<code>withTranslateNestedKeys</code> functions.
			</p>
		</chapter>

		<chapter title="Translating Keys" id="using-translations-translating-keys">
			<p>
				When you find a property or function expecting a <code>Key</code> object, it's enough to configure the
				key as explained above and use it directly.
				For situations where you need to translate a <code>Key</code> yourself, you'll need to use one of
				the provided translation functions.
			</p>

			<p>
				The <code>translate</code> and <code>translateArray</code> functions can be used to translate the
				current <code>Key</code> with a set of ordinal placeholders.
				If any pre-defined ordinal placeholders are present, they'll be used based on the
				<code>presetPlaceholderPosition</code> setting.
			</p>

			<p>
				The <code>translateNamed</code> function can be used to translate the current <code>Key</code> with a
				set of named placeholders.
				If any pre-defined named placeholders are present, they'll be used based on the
				<code>presetPlaceholderPosition</code> setting.
			</p>

			<p>
				All translation functions include a version suffixed with <code>Locale</code>, which will use the
				given locale for translation if the <code>Key</code> doesn't already have a locale set.
			</p>
		</chapter>

		<chapter title="Putting It All Together" id="using-translations-putting-together">
			<p>
				To better illustrate how you might use translation keys, consider this example:
			</p>

			<code-block lang="kotlin">
				// Assume we're in an Extension's `setup` function

				publicSlashCommand {
					// Name and description properties take Keys directly.
					name = Translations.Commands.About.name
					description = Translations.Commands.About.description

					action {
						respond {
							embed {
								// Translate keys for String properties.
								title = Translations.Embeds.About.title
									.withContext(this@action)
									.translateNamed("botName" to "My Bot")

								description = Translations.Embeds.About.description
									.withContext(this@action)
									.translateNamed("triggeringUser" to user.mention)
							}
						}
					}
				}
			</code-block>
		</chapter>
	</chapter>

	<chapter title="Override Bundles" id="override-bundles">
		<p>
			In addition to the normal translation bundles explained above, it's possible to override
			translations provided by other bundles.
			You can do this by creating your own translation bundle files, suffixing <code>_override</code> to the
			bundle name.
		</p>

		<p>
			For example, to override the default translations in the <code>kordex.strings</code> bundle, you
			could create <path>translations/kordex/strings_override.properties</path>, and add the keys you
			wish to override.
		</p>

		<note>
			<p>
				Because of the complexities involved with loading translations from plugins, please note that
				override bundles may not work quite as expected when they exist in a different class-loader
				from the original bundle.
			</p>

			<p>
				We generally recommend against overriding translations unless absolutely necessary.
				If you notice an issue with a translation, please report it to the relevant project instead
				if possible.
			</p>
		</note>
	</chapter>

	<chapter title="Formatters" id="formatters">
		<p>
			A number of locale-aware formatters are available for formatting rich types into human-readable strings.
		</p>

		<list type="bullet">
			<li>
				<code>DateTimePeriod.format(Locale)</code> - uses
				<a href="https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/util/Measure.html">
					ICU4J Measures</a> to create a duration-like string.
			</li>
		</list>
	</chapter>

	<chapter title="Parsers" id="parsers">
		<p>
			A number of locale-aware parsers are available for parsing strings into rich types.
			These parsers are cached when appropriate and allow you to convert various values without worrying about
			writing translations yourself.
		</p>

		<list type="bullet">
			<li>
				<p>
					<code>BooleanParser</code> - a string parser which can parse truthy and falsey values from strings
					in a locale-aware manner.
					This parser is used by the boolean converters, and it's also used by
					<code>String.parseBoolean(Locale)</code>.
				</p>

				<p>
					The relevant translation keys are <code>utils.string.false</code> and
					<code>utils.string.true</code>, and multiple comma-separated values are supported for each key.
				</p>

				<p>
					If a value can't be parsed, this parser returns <code>null</code>.
				</p>
			</li>

			<li>
				<p>
					<code>ColorParser</code> - a string parser which can parse Discord branding colours from strings in
					a locale-aware manner.
					This parser is used by the color converters and it supports black, blurple, fuchsia, green, red,
					white, and yellow.
				</p>

				<p>
					The relevant translation keys are <code>utils.colors.black</code>, <code>utils.colors.blurple</code>,
					<code>utils.colors.fuchsia</code>, <code>utils.colors.green</code>, <code>utils.colors.red</code>,
					<code>utils.colors.white</code>, and <code>utils.string.yellow</code>, and multiple
					comma-separated values are supported for each key.
				</p>

				<p>
					Translations for blurple include "purple," and translations for fuchsia include "pink."
				</p>

				<p>
					If a value can't be parsed, this parser returns <code>null</code>.
				</p>
			</li>

			<li>
				<p>
					<code>DurationParser</code> - a string parser which can parse <code>DateTimePeriod</code> objects
					from strings in a locale-aware manner.
					This parser is used by the duration converters.
				</p>

				<p>
					This (surprisingly complex) parser supports positive and negative durations specified in a number
					of forms.
					Bare numbers are not supported.
				</p>

				<list type="bullet">
					<li><format style="bold">Long:</format> <code>1 day, 2 hours, 3 minutes, 4 seconds</code></li>
					<li><format style="bold">Short:</format> <code>1d2h3m4s</code></li>
				</list>

				<p>
					All supported forms may be written right-to-left or left-to-right, as long as they're written
					consistently.
				</p>

				<p>
					The relevant translation keys are <code>utils.units.day</code>, <code>utils.units.week</code>,
					<code>utils.units.month</code>, <code>utils.units.year</code>, <code>utils.units.hour</code>,
					<code>utils.colors.minute</code>, and <code>utils.string.second</code>, and multiple
					comma-separated values are supported for each key.
				</p>
			</li>
		</list>
	</chapter>

	<chapter title="Kord Translations" id="kord-translations">
		<p>
			Kord Extensions provides translations for multiple Kord types, which may be useful for display to users
			on Discord.
			This is exposed via <code>toTranslationKey</code> and <code>translate</code> extension functions against
			the following types:
		</p>

		<list type="bullet">
			<li><code>NsfwLevel</code> - translation keys starting with <code>nsfwLevel.</code></li>
			<li><code>Permission</code> - translation keys starting with <code>permission.</code></li>
		</list>
	</chapter>

    <chapter title="Utilities" id="utilities">
		<p>
			A number of miscellaneous utilities for working with the translations system are available.
		</p>

		<list type="bullet">
			<li>
				<code>EMPTY_KEY</code> - a <code>Key</code> object referencing the empty string, useful as a default
				value in some situations (such as paginators with a single group).
			</li>

			<li>
				<code>EMPTY_VALUE_STRING</code> - a special string value representing an "empty" or "missing" value.
				This is a standard "nothing" value, and you should check for it when you need one.
				The string contains three empty set characters (<code>∅∅∅</code>).
			</li>

			<li>
				<code>SupportedLocales</code> - a collection of Locale objects representing locales with partial or
				full translations bundled with Kord Extensions.
			</li>
		</list>
    </chapter>

	<chapter title="Custom Providers" id="providers">
		<p>
			While we recommend sticking with the bundled <code>ResourceBundleTranslations</code> provider, we
			recognize that there may be cases where the default provider is unsuitable.
		</p>

		<p>
			In situations like that, you can extend the <code>ResourceBundleTranslations</code> or
			<code>TranslationsProvider</code> types, and configure
			<a href="Config-Internationalization.topic" anchor="builders">your bot's translation provider</a>.
		</p>
	</chapter>
</topic>
