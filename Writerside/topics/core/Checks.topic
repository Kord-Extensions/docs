<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Checks" id="Checks">

    <show-structure depth="2" />

    <p>
        Checks provide a way to define a reusable, generic set of predicates that may be applied to
        <a href="Events.topic" anchor="event-handler">event handlers</a>, <a href="Commands.topic">commands</a>,
        <a href="Components.topic">components</a>, and other APIs.
    </p>

    <p>
        In its simplest form, a check is an extension or receiver function against the <code>CheckContext</code> or
        <code>CheckContextWithCache</code> types, making use of the predefined check functions or APIs provided.
    </p>

    <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
        check {
            hasPermissions(
                // Same as the perms required to mass-ban members
                // using the "Members" management panel in the Discord
                // client.

                Permission.BanMembers + Permission.ManageGuild
            )
        }
    </code-block>

    <p>
        The default state for all checks is <format style="bold">passed</format>, with the <code>passed</code> property
        set to <code>true</code>.
        A check will not fail unless <code>passed</code> is set to <code>false</code>, but this property is
        automatically set for you when using the provided API functions.
    </p>

    <chapter title="Check Context API" id="context-api">
        <p>
            When writing your own checks, the following APIs are available.
        </p>

        <chapter title="Functions" id="context-functions">
            <table style="both">
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>fail</code></td>

                    <td>
                        <p>
                            Mark this check as having failed.
                        </p>

                        <p>
                            This function optionally takes a message explaining the failure,
                            which will be displayed to the user in most situations.
                            Use the <code>translate</code> functions to provide a translated message.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>failIf</code></td>

                    <td>
                        <p>
                            Mark this check as having failed if the callable block returns <code>true</code>.
                        </p>

                        <p>
                            This function optionally takes a message explaining the failure,
                            which will be displayed to the user in most situations.
                            Use the <code>translate</code> functions to provide a translated message.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>failIfNot</code></td>

                    <td>
                        <p>
                            Mark this check as having failed if the callable block returns <code>false</code>.
                        </p>

                        <p>
                            This function optionally takes a message explaining the failure,
                            which will be displayed to the user in most situations.
                            Use the <code>translate</code> functions to provide a translated message.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>pass</code></td>

                    <td>
                        Mark this check as having passed.
                    </td>
                </tr>

                <tr>
                    <td><code>passIf</code></td>

                    <td>
                        Mark this check as having passed if the callable block returns <code>true</code>.
                    </td>
                </tr>

                <tr id="context-functions-translations:div:bottom">
                    <td><code>passIfNot</code></td>

                    <td>
                        Mark this check as having passed if the callable block returns <code>false</code>.
                    </td>
                </tr>

                <tr id="context-functions-extension:div:bottom">
                    <td><code>translate</code></td>

                    <td>
                        There are a number of overloads for this function, which allows you to translate a given
                        string key based on the check's current locale or another given locale.
                        For more information on translations, see
                        <a href="Internationalisation.topic">the dedicated documentation</a>,
                        and examine the functions in your IDE for more information on their parameters.
                    </td>
                </tr>

                <tr>
                    <td><code>Boolean.whenFalse</code></td>

                    <td>
                        If the receiver is <code>false</code>, execute the provided callable block.
                        Otherwise, do nothing.
                    </td>
                </tr>

                <tr>
                    <td><code>Boolean.whenTrue</code></td>

                    <td>
                        If the receiver is <code>true</code>, execute the provided callable block.
                        Otherwise, do nothing.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Properties" id="context-properties">
            <table style="both">
                <tr>
                    <td> </td>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>cache</code></td>
                    <td><code>MutableStringKeyedMap&lt;Any&gt;</code></td>

                    <td>
                        <p>
                            <format style="bold">For <code>CheckContextWithCache</code>,</format> cache object shared
                            with other checks that are part of the current invocation, and provided within any
                            relevant contexts if all checks pass.
                        </p>

                        <p>
                            You may store data in this cache to be shared between your checks or contexts as required.
                            In some cases, this may help you to avoid making long-running calculations or API calls
                            multiple times, which will speed up your bot.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td>üè∑Ô∏è</td>
                    <td><code>defaultBundle</code></td>
                    <td><code>String?</code></td>

                    <td>
                        Bundle to be used by the <code>translate</code> functions by default.
                    </td>
                </tr>

                <tr>
                    <td>üåê</td>
                    <td><code>errorResponseKey</code></td>
                    <td><code>String</code></td>

                    <td>
                        Translation key to use when generating an error message for display on Discord, intended only
                        for formatting.
                        Defaults to <code>checks.responseTemplate</code>, and must contain a single indexed argument to
                        be replaced with the error message provided by the various <code>fail</code> functions.
                    </td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>event</code></td>
                    <td><code>T: Event</code></td>

                    <td>
                        Event object that triggered this check.
                    </td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>locale</code></td>
                    <td><code>Locale</code></td>

                    <td>
                        Relevant locale object for this check.
                        Provided by whatever system the check belongs to, and used by the <code>translate</code>
                        functions.
                    </td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>message</code></td>
                    <td><code>String?</code></td>

                    <td>
                        Error message to return to the user, typically set by the <code>fail</code> functions.
                        Will not be automatically translated, so use the <code>translate</code> functions if needed.
                    </td>
                </tr>

                <tr>
                    <td> </td>
                    <td><code>passed</code></td>
                    <td><code>Boolean</code></td>

                    <td>
                        Whether this check is currently passing.
                        Set by the <code>fail</code> and <code>pass</code> functions.
                        Defaults to <code>true</code>.
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Bundled Checks" id="bundled">
        <p>
            Kord Extensions provides a large number of predefined check functions.
            These checks are generic and work with all event types, with some caveats that are documented below.
        </p>

        <p>
            Before writing your own checks, it's best to make sure that there are no existing checks that cover your
            use-case!
        </p>

        <chapter title="Channel Checks" id="bundled-channel">
            <p>
                All functions in this section take either a <code>Snowflake</code> argument representing a channel ID,
                or a suspending callable block that returns a <code>ChannelBehavior</code>.
            </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>channelAbove</code></td>

                    <td>
	                    <p>
		                    Check whether the channel the event fired in is above the given channel in the channel list.
		                    This check attempts to calculate the channel positions in the same way Discord does:
	                    </p>

	                    <list>
		                    <li>Compares channels within the same category by their relative positions.</li>

		                    <li>
			                    Compares channels within different categories by the categories' relative positions,
			                    where channels not in a category are always above channels
			                    that are within categories.
		                    </li>
	                    </list>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a channel, or
		                    concerns a DM channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>channelBelow</code></td>

                    <td>
	                    <p>
		                    Check whether the channel the event fired in is below the given channel in the channel list.

		                    This check attempts to calculate the channel positions in the same way Discord does:
	                    </p>

	                    <list>
		                    <li>Compares channels within the same category by their relative positions.</li>

		                    <li>
			                    Compares channels within different categories by the categories' relative positions,
			                    where channels not in a category are always above channels
			                    that are within categories.
		                    </li>
	                    </list>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a channel, or
		                    concerns a DM channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>inCategory</code></td>

                    <td>
	                    <p>
		                    Check whether the event fired within the given category.
	                    </p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a channel, or
		                    concerns a DM channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>inChannel</code></td>

                    <td>
	                    <p>
		                    Check whether the event fired within the given channel.
	                    </p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notInCategory</code></td>

                    <td>
	                    <p>
		                    Check whether the event <format style="bold">didn't</format> fire within the given category.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a channel, or
		                    concerns a DM channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notInChannel</code></td>

                    <td>
	                    <p>
		                    Check whether the event <format style="bold">didn't</format> fire within the given channel.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Channel Type Checks" id="bundled-channel-type">
	        <p>
		        All functions in this section take a variadic argument, allowing you to specify more than one channel
		        type.
	        </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>channelType</code></td>

                    <td>
						<p>
							Check whether the channel the event fired in is one of the given channel types.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notChannelType</code></td>

                    <td>
	                    <p>
		                    Check whether the channel the event fired in <format style="bold">is not</format> one of
		                    the given channel types.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Guild Checks" id="bundled-guild">
	        <p>
		        All functions that take arguments in this section take either a <code>Snowflake</code> argument
		        representing a guild ID, or a suspending callable block that returns a <code>GuildBehavior</code>.
	        </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>inGuild</code></td>

                    <td>
	                    <p>
		                    Check whether the event fired within the given guild.
	                    </p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notInGuild</code></td>

                    <td>
	                    <p>
		                    Check whether the event <format style="bold">didn't</format> fire within the given guild.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a guild.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>anyGuild</code></td>

                    <td>
						<p>
							Check whether the event fired within a guild.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild, or when
		                    the corresponding <code>GuildBehavior</code> can't be retrieved.
	                    </p>

	                    <p>
		                    If you're not seeing the results you expected, please double-check your
		                    <a href="Config-Cache.topic">cache configuration</a>.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>noGuild</code></td>

                    <td>
	                    <p>
		                    Check whether the event <format style="bold">didn't</format> fire within a guild.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a guild, or when
		                    the corresponding <code>GuildBehavior</code> can't be retrieved.
	                    </p>

	                    <p>
		                    If you're not seeing the results you expected, please double-check your
		                    <a href="Config-Cache.topic">cache configuration</a>.
	                    </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Member Checks" id="bundled-member">
            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>hasPermission</code></td>

                    <td>
						<p>
							Check whether the guild member an event fired for has the given permission, or the
							Administrator permission.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild member,
		                    or when the corresponding <code>MemberBehavior</code> can't be retrieved.
	                    </p>

	                    <p>
		                    If you're not seeing the results you expected, please double-check your
		                    <a href="Config-Cache.topic">cache configuration</a> and
		                    <a href="Config-Intents.topic">intents configuration</a>.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>hasPermissions</code></td>

                    <td>
	                    <p>
		                    Check whether the guild member an event fired for has the given permissions set, or the
		                    Administrator permission.
	                    </p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild member,
		                    or when the corresponding <code>MemberBehavior</code> can't be retrieved.
	                    </p>

	                    <p>
		                    If you're not seeing the results you expected, please double-check your
		                    <a href="Config-Cache.topic">cache configuration</a> and
		                    <a href="Config-Intents.topic">intents configuration</a>.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notHasPermission</code></td>

                    <td>
	                    <p>
		                    Check whether the guild member an event fired for <format style="bold">doesn't</format>
		                    have the given permission,
		                    and <format style="bold">doesn't</format> have the Administrator permission.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a guild member,
		                    or when the corresponding <code>MemberBehavior</code> can't be retrieved.
	                    </p>

	                    <p>
		                    If you're not seeing the results you expected, please double-check your
		                    <a href="Config-Cache.topic">cache configuration</a> and
		                    <a href="Config-Intents.topic">intents configuration</a>.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notHasPermissions</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for <format style="bold">doesn't</format>
			                have the given permissions set,
			                and <format style="bold">doesn't</format> have the Administrator permission.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a guild member,
			                or when the corresponding <code>MemberBehavior</code> can't be retrieved.
		                </p>

		                <p>
			                If you're not seeing the results you expected, please double-check your
			                <a href="Config-Cache.topic">cache configuration</a> and
			                <a href="Config-Intents.topic">intents configuration</a>.
		                </p>
	                </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Miscellaneous Checks" id="bundled-misc">
            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>isBot</code></td>

                    <td>
						<p>
							Check whether the user an event fired for is a bot.
						</p>

						<p>
							<format style="bold">Always fails</format> when the event doesn't concern a user.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>isBotAdmin</code></td>

                    <td>
						<p>
							Check whether the user an event fired for is one of the current bot's application admins.
							The team the application belongs to on the Discord developer dashboard defines the
							application's admins.
						</p>

						<p>
							<format style="bold">Always fails</format> when the event doesn't concern a user, or the
							bot's application doesn't belong to a team.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>isBotOwner</code></td>

                    <td>
						<p>
							Check whether the user an event fired for is the current bot's application owner.
							For applications that don't belong to a team, this is the person that owns the bot's
							application on the Discord developer dashboard.
						</p>

						<p>
							<format style="bold">Always fails</format> when the event doesn't concern a user, or the
							bot's application belongs to a team.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>isInThread</code></td>

                    <td>
						<p>
							Check whether the event fired within a thread.
						</p>

						<p>
							<format style="bold">Always fails</format> when the event doesn't concern a channel.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>isNotBot</code></td>

	                <td>
		                <p>
			                Check whether the user an event fired for <format style="bold">is not</format> a bot.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a user.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>isNotBotAdmin</code></td>

	                <td>
		                <p>
			                Check whether the user an event fired for <format style="bold">is not</format> one of the
			                current bot's application admins.
			                The team the application belongs to on the Discord developer dashboard defines the
			                application's admins.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a user, or the
			                bot's application doesn't belong to a team.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>isNotBotOwner</code></td>

	                <td>
		                <p>
			                Check whether the user an event fired for <format style="bold">is not</format> the current
			                bot's application owner.
			                For applications that don't belong to a team, this is the person that owns the bot's
			                application on the Discord developer dashboard.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a user, or the
			                bot's application belongs to a team.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>isNotInThread</code></td>

                    <td>
	                    <p>
		                    Check whether the event <format style="bold">didn't</format> fire within a thread.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="NSFW Checks" id="bundled-nsfw">
	        <note>
		        <p>
			        The guild NSFW level comparison checks below compare NSFW levels based on their severity, rather
			        than Discord's integer values for this enumeration.
			        It uses the following order:
		        </p>

		        <list>
			        <li><code>NsfwLevel.Safe</code>: -1</li>
			        <li><code>NsfwLevel.Default</code>: 0</li>
			        <li><code>NsfwLevel.AgeRestricted</code>: 1</li>
			        <li><code>NsfwLevel.Explicit</code>: 2</li>
		        </list>

		        <p>
			        Kord Extensions uses verbatim comparison against the above integers for NSFW levels, which may
			        result in unexpected behaviour.
		        </p>
	        </note>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>channelIsNsfw</code></td>

                    <td>
						<p>
							Check whether the event fired in an age-restricted channel.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>channelOrGuildIsNsfw</code></td>

	                <td>
		                <p>
			                Check whether the event fired in an age-restricted channel, or an NSFW-marked guild.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a channel or
			                guild.
		                </p>

		                <p>
			                This check combines the <code>channelIsNsfw</code> and
			                <code>guildNsfwLevelHigherOrEqual</code> checks, with the latter function being called with
			                <code>NsfwLevel.AgeRestricted</code> as the first argument.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>guildNsfwLevelHigher</code></td>

                    <td>
						<p>
							Check whether the event fired in a guild that has a more severe NSFW level than the given
							one.
							See the note at the top of this section for information on how Kord Extensions compares
							NSFW levels.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>guildNsfwLevelHigherOrEqual</code></td>

	                <td>
		                <p>
			                Check whether the event fired in a guild that has an equal or more severe NSFW level than
			                the given one.
			                See the note at the top of this section for information on how Kord Extensions compares
			                NSFW levels.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>guildNsfwLevelLower</code></td>

	                <td>
		                <p>
			                Check whether the event fired in a guild that has a less severe NSFW level than the given
			                one.
			                See the note at the top of this section for information on how Kord Extensions compares
			                NSFW levels.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>guildNsfwLevelLowerOrEqual</code></td>

	                <td>
		                <p>
			                Check whether the event fired in a guild that has an equal or less severe NSFW level than
			                the given one.
			                See the note at the top of this section for information on how Kord Extensions compares
			                NSFW levels.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>hasGuildNsfwLevel</code></td>

                    <td>
						<p>
							Check whether the event fired in a guild with the given NSFW level.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notChannelIsNsfw</code></td>

                    <td>
	                    <p>
		                    Check whether the event <format style="bold">didn't</format> fire in an age-restricted
		                    channel.
	                    </p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notChannelOrGuildIsNsfw</code></td>

	                <td>
		                <p>
			                Check whether the event <format style="bold">didn't</format> fire in an age-restricted
			                channel or an NSFW-marked guild.
		                </p>

		                <p>
			                This check combines the <code>notChannelIsNsfw</code> and
			                <code>guildNsfwLevelLower</code> checks, with the latter function being called with
			                <code>NsfwLevel.AgeRestricted</code> as the first argument.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>notHasGuildNsfwLevel</code></td>

	                <td>
		                <p>
			                Check whether the event <format style="bold">didn't</format> fire in a guild with the given
			                NSFW level.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a guild.
		                </p>
	                </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Role Checks" id="bundled-role">
	        <p>
		        All functions in this section take either a <code>Snowflake</code> argument representing a role ID,
		        or a suspending callable block that returns a <code>RoleBehavior</code>.
	        </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>hasRole</code></td>

                    <td>
						<p>
							Check whether the guild member an event fired for has the given role.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild member,
		                    when the corresponding <code>MemberBehavior</code> can't be retrieved, or when the given
		                    role doesn't exist or can't be retrieved.
	                    </p>

	                    <p>
		                    If you're not seeing the results you expected, please double-check your
		                    <a href="Config-Cache.topic">cache configuration</a>.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>notHasRole</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for <format style="bold">doesn't</format> have
			                the given role.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a guild member,
			                when the corresponding <code>MemberBehavior</code> can't be retrieved, or when the given
			                role doesn't exist or can't be retrieved.
		                </p>

		                <p>
			                If you're not seeing the results you expected, please double-check your
			                <a href="Config-Cache.topic">cache configuration</a>.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>topRoleEqual</code></td>

                    <td>
						<p>
							Check whether the guild member an event fired for has the given role as their top role.
						</p>

	                    <p>
		                    <format style="bold">Always fails</format> when the event doesn't concern a guild member,
		                    when the guild member doesn't have any roles, when the corresponding
		                    <code>MemberBehavior</code> can't be retrieved, or when the given role doesn't exist or
		                    can't be retrieved.
	                    </p>
                    </td>
                </tr>

                <tr>
                    <td><code>topRoleHigher</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for has a top role listed above the given
			                role.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild member,
			                when the guild member doesn't have any roles, when the corresponding
			                <code>MemberBehavior</code> can't be retrieved, or when the given role doesn't exist or
			                can't be retrieved.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>topRoleHigherOrEqual</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for has a top role equal to or listed above
			                the given role.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild member,
			                when the guild member doesn't have any roles, when the corresponding
			                <code>MemberBehavior</code> can't be retrieved, or when the given role doesn't exist or
			                can't be retrieved.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>topRoleLower</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for has a top role listed below the given
			                role.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild member,
			                when the guild member doesn't have any roles, when the corresponding
			                <code>MemberBehavior</code> can't be retrieved, or when the given role doesn't exist or
			                can't be retrieved.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>topRoleLowerOrEqual</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for has a top role equal to or listed below
			                the given role.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a guild member,
			                when the guild member doesn't have any roles, when the corresponding
			                <code>MemberBehavior</code> can't be retrieved, or when the given role doesn't exist or
			                can't be retrieved.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>topRoleNotEqual</code></td>

	                <td>
		                <p>
			                Check whether the guild member an event fired for <format style="bold">doesn't</format> have
			                the given role as their top role.
		                </p>

		                <p>
			                <format style="bold">Always passes</format> when the event doesn't concern a guild member,
			                when the guild member doesn't have any roles, when the corresponding
			                <code>MemberBehavior</code> can't be retrieved, or when the given role doesn't exist or
			                can't be retrieved.
		                </p>
	                </td>
                </tr>
            </table>
        </chapter>

        <chapter title="Top Channel Checks" id="bundled-top-channel">
	        <p>
		        All functions in this section take either a <code>Snowflake</code> argument representing a role ID,
		        or a suspending callable block that returns a <code>ChannelBehavior</code>.
	        </p>

            <table>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>inTopChannel</code></td>

	                <td>
		                <p>
			                Check whether the event fired within the given top channel.
			                Resolves the parent channel when the event fired within a thread, and uses that for the
			                comparison.
		                </p>

		                <p>
			                <format style="bold">Always fails</format> when the event doesn't concern a channel.
		                </p>
	                </td>
                </tr>

                <tr>
                    <td><code>notInTopChannel</code></td>

                    <td>
						<p>
							Check whether the event <format style="bold">didn't</format> fire within the given top channel.
							Resolves the parent channel when the event fired within a thread, and uses that for the
							comparison.
						</p>

	                    <p>
		                    <format style="bold">Always passes</format> when the event doesn't concern a channel.
	                    </p>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>

    <chapter title="Utilities" id="utilities">
		<p>
			Kord Extensions provides several utilities to help you when working with checks.
		</p>

	    <chapter title="General Functions" id="utilities-general">
		    <p>
			    These functions are extension functions against the <code>CheckContext</code> type.
		    </p>

			<table style="header-row">
				<tr>
					<td>Name</td>
					<td>Description</td>
				</tr>

				<tr>
					<td><code>or</code></td>

					<td>
						<p>
							Convenience function intended for combining checks.
							This allows you to supply multiple checks, where only one of them needs to pass.
						</p>

						<code-block lang="kotlin" collapsible="true" collapsed-title="Example Usage">
							public suspend fun CheckContext&lt;*&gt;.channelOrGuildIsNsfw() {
								channelIsNsfw()
								or { guildNsfwLevelHigherOrEqual(NsfwLevel.AgeRestricted) }
							}
						</code-block>

						<p>
							Combines failure messages when there's already a check failure message and the check within
							the <code>or</code> block sets a failure message.
						</p>

						<p>
							If any previous checks have passed, doesn't run the code within the <code>or</code> block.
						</p>
					</td>
				</tr>

				<tr>
					<td><code>silence</code></td>

					<td>
						If a check has set a failure message, this function will clear it.
						This prevents an error message from being sent if the check fails.
					</td>
				</tr>
			</table>
	    </chapter>

	    <chapter title="Entity Extraction Functions" id="utilities-extracting-entities">
		    <p>
			    These functions exist to provide easy ways to extract entities from generic events.
			    While these functions are particularly useful for implementing checks, they may also be useful in other
			    scenarios.
		    </p>

		    <warning>
			    <p>
				    Because Kord doesn't provide interfaces that describe what data is available in each event type,
				    these functions are essentially huge <code>when</code> blocks.
				    We maintain these functions by hand, so if we've missed any events, please let us know!
			    </p>

			    <p>
				    If you're writing custom events, please make sure to implement the relevant
				    <a href="Custom-Events.topic" anchor="rich-base-types" />.
			    </p>
		    </warning>

		    <note>
			    Some events may return a <code>null</code> value for their corresponding entities.
			    There's no way to tell the difference between an event that returns a null value, or an event that
			    doesn't support the given event type.
		    </note>

		    <table style="header-row">
			    <tr>
				    <td>Name</td>
				    <td>Description</td>
			    </tr>

			    <tr>
				    <td><code>channelFor</code></td>

				    <td>
						Retrieve the corresponding <code>ChannelBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a channel or the <code>ChannelBehavior</code>
					    can't be retrieved.
				    </td>
			    </tr>

			    <tr>
				    <td><code>guildFor</code></td>

				    <td>
					    Retrieve the corresponding <code>GuildBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a guild or the <code>GuildBehavior</code>
					    can't be retrieved.
				    </td>
			    </tr>

			    <tr>
				    <td><code>interactionFor</code></td>

				    <td>
					    Retrieve the corresponding <code>Interaction</code> for the given event, or
					    <code>null</code> when the event doesn't concern an interaction.
				    </td>
			    </tr>

			    <tr>
				    <td><code>memberFor</code></td>

				    <td>
					    Retrieve the corresponding <code>MemberBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a guild member or the
					    <code>MemberBehavior</code> can't be retrieved.
				    </td>
			    </tr>

			    <tr>
				    <td><code>messageFor</code></td>

				    <td>
					    Retrieve the corresponding <code>MessageBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a message or the <code>MessageBehavior</code>
					    can't be retrieved.
				    </td>
			    </tr>

			    <tr>
				    <td><code>roleFor</code></td>

				    <td>
					    Retrieve the corresponding <code>RoleBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a role or the <code>RoleBehavior</code>
					    can't be retrieved.
				    </td>
			    </tr>

			    <tr>
				    <td><code>threadFor</code></td>

				    <td>
					    Retrieve the corresponding <code>ThreadChannelBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a role or the
					    <code>ThreadChannelBehavior</code> can't be retrieved.
				    </td>
			    </tr>

			    <tr>
				    <td><code>topChannelFor</code></td>

				    <td>
					    <p>
						    Retrieve the corresponding <code>ChannelBehavior</code> for the given event, or
						    <code>null</code> when the event doesn't concern a channel or the
						    <code>ChannelBehavior</code> can't be retrieved.
					    </p>

					    <p>
						    Retrieves the parent channel when the event concerns a thread.
					    </p>
				    </td>
			    </tr>

			    <tr>
				    <td><code>userFor</code></td>

				    <td>
					    Retrieve the corresponding <code>UserBehavior</code> for the given event, or
					    <code>null</code> when the event doesn't concern a user or the<code>UserBehavior</code> can't
					    be retrieved.
				    </td>
			    </tr>
		    </table>
	    </chapter>

	    <chapter title="Logging Functions" id="utilities-logging">
		    <p>
			    These functions are extension functions against the <code>KLogger</code> type, part of the Kotlin
			    Logging library.
			    Designed for specific situations, these functions log predefined messages for you.
		    </p>

		    <table style="header-row">
			    <tr>
				    <td>Name</td>
				    <td>Description</td>
			    </tr>

			    <tr>
				    <td><code>failed</code></td>

				    <td>
					    Log a failing check, along with a message that explains why.
				    </td>
			    </tr>

			    <tr>
				    <td><code>noCategoryId</code></td>

				    <td>
						Log that this check failed because the given ID doesn't correspond with a known category.
				    </td>
			    </tr>

			    <tr>
				    <td><code>noChannelId</code></td>

				    <td>
					    Log that this check failed because the given ID doesn't correspond with a known channel.
				    </td>
			    </tr>

			    <tr>
				    <td><code>noGuildId</code></td>

				    <td>
					    Log that this check failed because the given ID doesn't correspond with a known guild.
				    </td>
			    </tr>

			    <tr>
				    <td><code>noRoleId</code></td>

				    <td>
					    Log that this check failed because the given ID doesn't correspond with a known role.
				    </td>
			    </tr>

			    <tr>
				    <td><code>nullChannel</code></td>

				    <td>
					    Log that the event's channel is null, and that this check may not support the event.
				    </td>
			    </tr>

			    <tr>
				    <td><code>nullGuild</code></td>

				    <td>
					    Log that the event's guild is null, and that this check may not support the event.
				    </td>
			    </tr>

			    <tr>
				    <td><code>nullMember</code></td>

				    <td>
					    Log that the event's member is null, and that this check may not support the event.
				    </td>
			    </tr>

			    <tr>
				    <td><code>nullMessage</code></td>

				    <td>
					    Log that the event's message is null, and that this check may not support the event.
				    </td>
			    </tr>

			    <tr>
				    <td><code>passed</code></td>

				    <td>
					    Log a passing check, optionally along with a message.
				    </td>
			    </tr>
		    </table>
	    </chapter>
    </chapter>

    <chapter title="Custom Check Functions" id="custom-functions">
		<p>
			Sometimes, it can be useful to define your own check functions.
			This allows you to create custom, reusable checks for your own use-cases.
		</p>

	    <p>
		    All check functions are extension functions against the <code>CheckContext</code> type, and they may or
		    may not take arguments as required.
		    There's no mandated structure for these functions, but you may wish to use a similar structure to the
		    bundled checks:
	    </p>

	    <code-block lang="kotlin" collapsible="true" collapsed-title="Example Structure">
		    public suspend fun &lt;T: Event&gt; CheckContext&lt;T&gt;.myCheck() {
		        if (!passed) {
		            // This check context has already failed, so bail early.
		            return
		        }

		        // Create a logger that's exclusive to this check.
		        val logger = KotlinLogging.logger("package.and.function.myCheck")

		        // Extract the relevant entities from the event.
		        val eventChannel = channelFor(event)

		        // Do a null check, if necessary.
		        if (eventChannel == null) {
		            logger.nullChannel(event)

		            fail()
		        } else {
		            // Do your check logic here.

		            if (eventChannel.id.toString().startsWith("1")) {
		                // When the check passes, remember to log it.
		                logger.passed()

		                pass()
		            } else {
		                // When the check faiils, remember to log exactly why it failed.
		                logger.failed("Channel ID did not start with 1")

		                fail("Channel ID did not start with 1")
		            }
		        }
		    }
	    </code-block>

	    <p>
		    If you need more examples, feel free to
		    <a href="https://github.com/Kord-Extensions/kord-extensions/tree/root/kord-extensions/src/main/kotlin/dev/kordex/core/checks">
			    take a look at the bundled checks.</a>
	    </p>
    </chapter>
</topic>
